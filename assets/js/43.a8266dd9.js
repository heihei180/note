(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{355:function(e,n,a){"use strict";a.r(n);var s=a(25),t=Object(s.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"实战-群聊的成员管理-加入与退出-获取成员列表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实战-群聊的成员管理-加入与退出-获取成员列表"}},[e._v("#")]),e._v(" 实战：群聊的成员管理（加入与退出，获取成员列表）")]),e._v(" "),n("blockquote",[n("p",[e._v("上一小节，我们已经学习了如何创建群聊并通知到群聊的各位成员。本小节，我们来实现群成员管理，包括群的加入退出，获取成员列表两大功能。有了前面两小节的基础，相信本小节的内容对你来说会比较简单。")])]),e._v(" "),n("p",[e._v("在开始之前，我们依然是先来看一下最终的效果。")]),e._v(" "),n("h2",{attrs:{id:"_1-最终效果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-最终效果"}},[e._v("#")]),e._v(" 1. 最终效果")]),e._v(" "),n("blockquote",[n("p",[e._v("服务端")])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/10/5/1664484871ef2aec?w=1240&h=319&f=png&s=122094",alt:"image.png"}})]),e._v(" "),n("p",[e._v("从服务端可以看到，闪电侠、逆闪、极速先后登录到服务器，然后随后，闪电侠创建一个群聊，接下来，萨维塔也登录了。这里，客户端我们只展示闪电侠和萨维塔的控制台界面")]),e._v(" "),n("blockquote",[n("p",[e._v("客户端 - 闪电侠")])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/10/5/1664484872148954?w=1240&h=444&f=png&s=301020",alt:"image.png"}})]),e._v(" "),n("blockquote",[n("p",[e._v("客户端 - 萨维塔")])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/10/5/1664484871f648d4?w=1240&h=386&f=png&s=184393",alt:"image.png"}})]),e._v(" "),n("p",[e._v("我们可以看到最终效果是四位用户登录成功之后")]),e._v(" "),n("ol",[n("li",[e._v("闪电侠先拉逆闪和极速加入了群聊，控制台输出群创建成功的消息。")]),e._v(" "),n("li",[e._v('随后在萨维塔的控制台输入 "joinGroup" 之后再输入群聊的 id，加入群聊，控制台显示加入群成功。')]),e._v(" "),n("li",[e._v('在闪电侠的控制台输入 "listGroupMembers" 之后再输入群聊的 id，展示了当前群聊成员包括了极速、萨维塔、闪电侠、逆闪。')]),e._v(" "),n("li",[e._v('萨维塔的控制台输入 "quitGroup" 之后再输入群聊的 id，退出群聊，控制台显示退群成功。')]),e._v(" "),n("li",[e._v('最后在闪电侠的控制台输入 "listGroupMembers" 之后再输入群聊的 ID，展示了当前群聊成员已无萨维塔。')])]),e._v(" "),n("p",[e._v("接下来，我们就来实现加入群聊，退出群聊，获取成员列表三大功能。")]),e._v(" "),n("h2",{attrs:{id:"_2-群的加入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-群的加入"}},[e._v("#")]),e._v(" 2. 群的加入")]),e._v(" "),n("h3",{attrs:{id:"_2-1-控制台添加群加入命令处理器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-控制台添加群加入命令处理器"}},[e._v("#")]),e._v(" 2.1 控制台添加群加入命令处理器")]),e._v(" "),n("blockquote",[n("p",[e._v("JoinGroupConsoleCommand.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class JoinGroupConsoleCommand implements ConsoleCommand {\n    @Override\n    public void exec(Scanner scanner, Channel channel) {\n        JoinGroupRequestPacket joinGroupRequestPacket = new JoinGroupRequestPacket();\n\n        System.out.print("输入 groupId，加入群聊：");\n        String groupId = scanner.next();\n\n        joinGroupRequestPacket.setGroupId(groupId);\n        channel.writeAndFlush(joinGroupRequestPacket);\n    }\n}\n\n')])])]),n("p",[e._v("按照前面两小节的套路，我们在控制台先添加群加入命令处理器 "),n("code",[e._v("JoinGroupConsoleCommand")]),e._v("，在这个处理器中，我们创建一个指令对象 "),n("code",[e._v("JoinGroupRequestPacket")]),e._v("，填上群 id 之后，将数据包发送至服务端。之后，我们将该控制台指令添加到 "),n("code",[e._v("ConsoleCommandManager")]),e._v("。")]),e._v(" "),n("blockquote",[n("p",[e._v("ConsoleCommandManager.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class ConsoleCommandManager implements ConsoleCommand {\n    \n    public ConsoleCommandManager() {\n        // ...\n        consoleCommandMap.put("joinGroup", new JoinGroupConsoleCommand());\n        // ...\n    }\n}\n\n')])])]),n("p",[e._v("接下来，就轮到服务端来处理加群请求了。")]),e._v(" "),n("h3",{attrs:{id:"_2-2-服务端处理群加入请求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-服务端处理群加入请求"}},[e._v("#")]),e._v(" 2.2 服务端处理群加入请求")]),e._v(" "),n("p",[e._v("服务端的 pipeline 中添加对应的 handler - "),n("code",[e._v("JoinGroupRequestHandler")])]),e._v(" "),n("blockquote",[n("p",[e._v("NettyServer.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\n.childHandler(new ChannelInitializer<NioSocketChannel>() {\n    protected void initChannel(NioSocketChannel ch) {\n        // 添加加群请求处理器\n        ch.pipeline().addLast(new JoinGroupRequestHandler());\n        // ..\n    }\n});\n\n\n")])])]),n("p",[n("code",[e._v("JoinGroupRequestHandler")]),e._v(" 的具体逻辑为")]),e._v(" "),n("blockquote",[n("p",[e._v("JoinGroupRequestHandler.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class JoinGroupRequestHandler extends SimpleChannelInboundHandler<JoinGroupRequestPacket> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, JoinGroupRequestPacket requestPacket) {\n        // 1. 获取群对应的 channelGroup，然后将当前用户的 channel 添加进去\n        String groupId = requestPacket.getGroupId();\n        ChannelGroup channelGroup = SessionUtil.getChannelGroup(groupId);\n        channelGroup.add(ctx.channel());\n\n        // 2. 构造加群响应发送给客户端\n        JoinGroupResponsePacket responsePacket = new JoinGroupResponsePacket();\n\n        responsePacket.setSuccess(true);\n        responsePacket.setGroupId(groupId);\n        ctx.channel().writeAndFlush(responsePacket);\n    }\n}\n\n")])])]),n("ol",[n("li",[e._v("首先，通过 groupId 拿到对应的 "),n("code",[e._v("ChannelGroup")]),e._v("，之后，只需要调用 "),n("code",[e._v("ChannelGroup.add()")]),e._v(" 方法，将加入群聊的用户的 channel 添加进去，服务端即完成了加入群聊的逻辑。")]),e._v(" "),n("li",[e._v("然后，构造一个加群响应，填入 groupId 之后，调用 "),n("code",[e._v("writeAndFlush()")]),e._v(" 发送给加入群聊的客户端。")])]),e._v(" "),n("h3",{attrs:{id:"_2-3-客户端处理群加入响应"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-客户端处理群加入响应"}},[e._v("#")]),e._v(" 2.3 客户端处理群加入响应")]),e._v(" "),n("p",[e._v("我们在客户端的 pipeline 中添加对应的 handler - "),n("code",[e._v("JoinGroupResponseHandler")]),e._v(" 来处理加群之后的响应")]),e._v(" "),n("blockquote",[n("p",[e._v("NettyClient.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(".handler(new ChannelInitializer<SocketChannel>() {\n    @Override\n    public void initChannel(SocketChannel ch) {\n        // 添加加群响应处理器\n        ch.pipeline().addLast(new JoinGroupResponseHandler());\n        // ...\n    }\n});\n\n")])])]),n("p",[n("code",[e._v("JoinGroupResponseHandler")]),e._v(" 对应的逻辑为")]),e._v(" "),n("blockquote",[n("p",[e._v("JoinGroupResponseHandler.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class JoinGroupResponseHandler extends SimpleChannelInboundHandler<JoinGroupResponsePacket> {\n    protected void channelRead0(ChannelHandlerContext ctx, JoinGroupResponsePacket responsePacket) {\n        if (responsePacket.isSuccess()) {\n            System.out.println("加入群[" + responsePacket.getGroupId() + "]成功!");\n        } else {\n            System.err.println("加入群[" + responsePacket.getGroupId() + "]失败，原因为：" + responsePacket.getReason());\n        }\n    }\n}\n\n')])])]),n("p",[e._v("该处理器的逻辑很简单，只是简单的将加群的结果输出到控制台，实际生产环境 IM 可能比这个要复杂，但是修改起来也是非常容易的。至此，加群相关的逻辑到这里就结束了。")]),e._v(" "),n("h2",{attrs:{id:"_3-群的退出"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-群的退出"}},[e._v("#")]),e._v(" 3. 群的退出")]),e._v(" "),n("p",[e._v("关于群的退出和群的加入逻辑非常类似，这里展示一下关键代码，完整代码请参考 "),n("a",{attrs:{href:"https://github.com/lightningMan/flash-netty",target:"_blank",rel:"noopener noreferrer"}},[e._v("github"),n("OutboundLink")],1),e._v(" "),n("strong",[e._v("对应本小节分支")])]),e._v(" "),n("p",[e._v("服务端退群的核心逻辑为 "),n("code",[e._v("QuitGroupRequestHandler")])]),e._v(" "),n("blockquote",[n("p",[e._v("QuitGroupRequestHandler.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class QuitGroupRequestHandler extends SimpleChannelInboundHandler<QuitGroupRequestPacket> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, QuitGroupRequestPacket requestPacket) {\n        // 1. 获取群对应的 channelGroup，然后将当前用户的 channel 移除\n        String groupId = requestPacket.getGroupId();\n        ChannelGroup channelGroup = SessionUtil.getChannelGroup(groupId);\n        channelGroup.remove(ctx.channel());\n\n        // 2. 构造退群响应发送给客户端\n        QuitGroupResponsePacket responsePacket = new QuitGroupResponsePacket();\n\n        responsePacket.setGroupId(requestPacket.getGroupId());\n        responsePacket.setSuccess(true);\n        ctx.channel().writeAndFlush(responsePacket);\n\n    }\n}\n\n")])])]),n("p",[e._v("从上面代码其实可以看到，"),n("code",[e._v("QuitGroupRequestHandler")]),e._v(" 和 "),n("code",[e._v("JoinGroupRequestHandler")]),e._v(" 其实是一个逆向的过程")]),e._v(" "),n("ol",[n("li",[e._v("首先，通过 groupId 拿到对应的 "),n("code",[e._v("ChannelGroup")]),e._v("，之后，只需要调用 "),n("code",[e._v("ChannelGroup.remove()")]),e._v(" 方法，将当前用户的 channel 删除，服务端即完成了退群的逻辑。")]),e._v(" "),n("li",[e._v("然后，构造一个退群响应，填入 groupId 之后，调用 "),n("code",[e._v("writeAndFlush()")]),e._v(" 发送给退群的客户端。")])]),e._v(" "),n("p",[e._v("至此，加群和退群的逻辑到这里就结束了，最后，我们来看一下获取成员列表的逻辑。")]),e._v(" "),n("h2",{attrs:{id:"_4-获取成员列表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-获取成员列表"}},[e._v("#")]),e._v(" 4. 获取成员列表")]),e._v(" "),n("h3",{attrs:{id:"_4-1-控制台添加获取群列表命令处理器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-控制台添加获取群列表命令处理器"}},[e._v("#")]),e._v(" 4.1 控制台添加获取群列表命令处理器")]),e._v(" "),n("blockquote",[n("p",[e._v("ListGroupMembersConsoleCommand.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class ListGroupMembersConsoleCommand implements ConsoleCommand {\n\n    @Override\n    public void exec(Scanner scanner, Channel channel) {\n        ListGroupMembersRequestPacket listGroupMembersRequestPacket = new ListGroupMembersRequestPacket();\n\n        System.out.print("输入 groupId，获取群成员列表：");\n        String groupId = scanner.next();\n\n        listGroupMembersRequestPacket.setGroupId(groupId);\n        channel.writeAndFlush(listGroupMembersRequestPacket);\n    }\n}\n\n')])])]),n("p",[e._v("依旧按照一定的的套路，我们在控制台先添加获取群列表命令处理器 "),n("code",[e._v("ListGroupMembersConsoleCommand")]),e._v("，在这个处理器中，我们创建一个指令对象 "),n("code",[e._v("ListGroupMembersRequestPacket")]),e._v("，填上群 id 之后，将数据包发送至服务端。之后，我们将该控制台指令添加到 "),n("code",[e._v("ConsoleCommandManager")]),e._v("。")]),e._v(" "),n("blockquote",[n("p",[e._v("ConsoleCommandManager.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class ConsoleCommandManager implements ConsoleCommand {\n    \n    public ConsoleCommandManager() {\n        // ...\n        consoleCommandMap.put("listGroupMembers", new ListGroupMembersConsoleCommand());\n        // ...\n    }\n}\n\n')])])]),n("p",[e._v("接着，轮到服务端来处理获取成员列表请求。")]),e._v(" "),n("h3",{attrs:{id:"_4-2-服务端处理获取成员列表请求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-服务端处理获取成员列表请求"}},[e._v("#")]),e._v(" 4.2 服务端处理获取成员列表请求")]),e._v(" "),n("p",[e._v("服务端的 pipeline 中添加对应的 handler - "),n("code",[e._v("ListGroupMembersRequestHandler")])]),e._v(" "),n("blockquote",[n("p",[e._v("NettyServer.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\n.childHandler(new ChannelInitializer<NioSocketChannel>() {\n    protected void initChannel(NioSocketChannel ch) {\n        // 添加获取群成员请求处理器\n        ch.pipeline().addLast(new ListGroupMembersRequestHandler());\n        // ..\n    }\n});\n\n\n")])])]),n("p",[n("code",[e._v("ListGroupMembersRequestHandler")]),e._v(" 的具体逻辑为")]),e._v(" "),n("blockquote",[n("p",[e._v("ListGroupMembersRequestHandler.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class ListGroupMembersRequestHandler extends SimpleChannelInboundHandler<ListGroupMembersRequestPacket> {\n    protected void channelRead0(ChannelHandlerContext ctx, JoinGroupRequestPacket requestPacket) {\n        // 1. 获取群的 ChannelGroup\n        String groupId = requestPacket.getGroupId();\n        ChannelGroup channelGroup = SessionUtil.getChannelGroup(groupId);\n\n        // 2. 遍历群成员的 channel，对应的 session，构造群成员的信息\n        List<Session> sessionList = new ArrayList<>();\n        for (Channel channel : channelGroup) {\n            Session session = SessionUtil.getSession(channel);\n            sessionList.add(session);\n        }\n\n        // 3. 构建获取成员列表响应写回到客户端\n        ListGroupMembersResponsePacket responsePacket = new ListGroupMembersResponsePacket();\n\n        responsePacket.setGroupId(groupId);\n        responsePacket.setSessionList(sessionList);\n        ctx.channel().writeAndFlush(responsePacket);\n    }\n}\n\n")])])]),n("ol",[n("li",[e._v("首先，我们通过 groupId 拿到对应的 "),n("code",[e._v("ChannelGroup")]),e._v("。")]),e._v(" "),n("li",[e._v("接着，我们创建一个 sessionList 用来装载群成员信息，我们遍历 channel 的每个 session，把对应的用户信息装到 sessionList 中，实际生产环境中，这里可能会构造另外一个对象来装载用户信息而非 Session，这里我们就简单粗暴点了，改造起来不难。")]),e._v(" "),n("li",[e._v("最后，我们构造一个获取成员列表的响应指令数据包，填入 groupId 和群成员的信息之后，调用 "),n("code",[e._v("writeAndFlush()")]),e._v(" 发送给发起获取成员列表的客户端。")])]),e._v(" "),n("p",[e._v("最后，就剩下客户端来处理获取群成员列表的响应了。")]),e._v(" "),n("h3",{attrs:{id:"_4-3-客户端处理获取成员列表响应"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-客户端处理获取成员列表响应"}},[e._v("#")]),e._v(" 4.3 客户端处理获取成员列表响应")]),e._v(" "),n("p",[e._v("套路和前面一样，我们在客户端的 pipeline 中添加一个 handler - "),n("code",[e._v("ListGroupMembersResponseHandler")])]),e._v(" "),n("blockquote",[n("p",[e._v("NettyClient.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(".handler(new ChannelInitializer<SocketChannel>() {\n    public void initChannel(SocketChannel ch) {\n        // ...\n        // 添加获取群成员响应处理器\n        ch.pipeline().addLast(new ListGroupMembersResponseHandler());\n        // ...\n    }\n});\n\n")])])]),n("p",[e._v("而我们这里 "),n("code",[e._v("ListGroupMembersResponseHandler")]),e._v(" 的逻辑也只是在控制台展示一下群成员的信息")]),e._v(" "),n("blockquote",[n("p",[e._v("ListGroupMembersResponseHandler.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class ListGroupMembersResponseHandler extends SimpleChannelInboundHandler<ListGroupMembersResponsePacket> {\n    \n    protected void channelRead0(ChannelHandlerContext ctx, ListGroupMembersResponsePacket responsePacket) {\n        System.out.println("群[" + responsePacket.getGroupId() + "]中的人包括：" + responsePacket.getSessionList());\n    }\n}\n\n')])])]),n("p",[e._v("至此，群成员加入退出，获取群成员列表对应的逻辑到这里就全部实现了，其实从这小节和前面的一两个小节大家其实可以看到，我们添加一个新功能其实是有一定的套路的，我们在最后的总结给出这个套路。")]),e._v(" "),n("h2",{attrs:{id:"_5-总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-总结"}},[e._v("#")]),e._v(" 5. 总结")]),e._v(" "),n("p",[e._v("添加一个服务端和客户端交互的新功能只需要遵循以下的步骤：")]),e._v(" "),n("ol",[n("li",[e._v("创建控制台指令对应的 "),n("code",[e._v("ConsoleCommand")]),e._v(" 并添加到 "),n("code",[e._v("ConsoleCommandManager")]),e._v("。")]),e._v(" "),n("li",[e._v("控制台输入指令和数据之后填入协议对应的指令数据包 - "),n("code",[e._v("xxxRequestPacket")]),e._v("，将请求写到服务端。")]),e._v(" "),n("li",[e._v("服务端创建对应的 "),n("code",[e._v("xxxRequestPacketHandler")]),e._v(" 并添加到服务端的 pipeline 中，在 "),n("code",[e._v("xxxRequestPacketHandler")]),e._v(" 处理完之后构造对应的 "),n("code",[e._v("xxxResponsePacket")]),e._v(" 发送给客户端。")]),e._v(" "),n("li",[e._v("客户端创建对应的 "),n("code",[e._v("xxxResponsePacketHandler")]),e._v(" 并添加到客户端的 pipeline 中，最后在 "),n("code",[e._v("xxxResponsePacketHandler")]),e._v(" 完成响应的处理。")]),e._v(" "),n("li",[e._v("最后，最容易忽略的一点就是，新添加 "),n("code",[e._v("xxxPacket")]),e._v(" 别忘了完善编解码器 "),n("code",[e._v("PacketCodec")]),e._v(" 中的 "),n("code",[e._v("packetTypeMap")]),e._v("！")])]),e._v(" "),n("h2",{attrs:{id:"思考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#思考"}},[e._v("#")]),e._v(" 思考")]),e._v(" "),n("ol",[n("li",[e._v('实现以下功能：客户端加入或者退出群聊，将加入群聊的消息也通知到群聊中的其他客户端，这个消息需要和发起群聊的客户端区分开，类似 "xxx 加入群聊 yyy" 的格式。')]),e._v(" "),n("li",[e._v("实现当一个群的人数为 0 的时候，清理掉内存中群相关的信息。")])]),e._v(" "),n("p",[e._v("欢迎留言讨论。")])])}),[],!1,null,null,null);n.default=t.exports}}]);