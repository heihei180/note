(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{347:function(e,t,n){"use strict";n.r(t);var a=n(25),s=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"实战-netty-实现客户端登录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实战-netty-实现客户端登录"}},[e._v("#")]),e._v(" 实战：Netty 实现客户端登录")]),e._v(" "),t("blockquote",[t("p",[e._v("本小节，我们来实现客户端登录到服务端的过程")])]),e._v(" "),t("h2",{attrs:{id:"登录流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#登录流程"}},[e._v("#")]),e._v(" 登录流程")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/8/14/16535d7424e02d3a?w=1240&h=426&f=png&s=54856",alt:"image.png"}})]),e._v(" "),t("p",[e._v("从上图中我们可以看到，客户端连接上服务端之后")]),e._v(" "),t("ol",[t("li",[e._v("客户端会构建一个登录请求对象，然后通过编码把请求对象编码为 ByteBuf，写到服务端。")]),e._v(" "),t("li",[e._v("服务端接受到 ByteBuf 之后，首先通过解码把 ByteBuf 解码为登录请求响应，然后进行校验。")]),e._v(" "),t("li",[e._v("服务端校验通过之后，构造一个登录响应对象，依然经过编码，然后再写回到客户端。")]),e._v(" "),t("li",[e._v("客户端接收到服务端的之后，解码 ByteBuf，拿到登录响应响应，判断是否登陆成功")])]),e._v(" "),t("h2",{attrs:{id:"逻辑处理器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逻辑处理器"}},[e._v("#")]),e._v(" 逻辑处理器")]),e._v(" "),t("p",[e._v("接下来，我们分别实现一下上述四个过程，开始之前，我们先来回顾一下客户端与服务端的启动流程，客户端启动的时候，我们会在引导类 "),t("code",[e._v("Bootstrap")]),e._v(" 中配置客户端的处理逻辑，本小节中，我们给客户端配置的逻辑处理器叫做 "),t("code",[e._v("ClientHandler")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class ClientHandler extends ChannelInboundHandlerAdapter {\n}\n\n")])])]),t("p",[e._v("然后，客户端启动的时候，我们给 "),t("code",[e._v("Bootstrap")]),e._v(" 配置上这个逻辑处理器")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            public void initChannel(SocketChannel ch) {\n                ch.pipeline().addLast(new ClientHandler());\n            }\n        });\n\n\n")])])]),t("p",[e._v("这样，在客户端侧，Netty 中 IO 事件相关的回调就能够回调到我们的 "),t("code",[e._v("ClientHandler")]),e._v("。")]),e._v(" "),t("p",[e._v("同样，我们给服务端引导类 "),t("code",[e._v("ServerBootstrap")]),e._v(" 也配置一个逻辑处理器 "),t("code",[e._v("ServerHandler")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class ServerHandler extends ChannelInboundHandlerAdapter {\n}\n\n\nserverBootstrap.childHandler(new ChannelInitializer<NioSocketChannel>() {\n            protected void initChannel(NioSocketChannel ch) {\n                ch.pipeline().addLast(new ServerHandler());\n            }\n        }\n\n\n")])])]),t("p",[e._v("这样，在服务端侧，Netty 中 IO 事件相关的回调就能够回调到我们的 "),t("code",[e._v("ServerHandler")]),e._v("。")]),e._v(" "),t("p",[e._v("接下来，我们就围绕这两个 Handler 来编写我们的处理逻辑。")]),e._v(" "),t("h2",{attrs:{id:"客户端发送登录请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#客户端发送登录请求"}},[e._v("#")]),e._v(" 客户端发送登录请求")]),e._v(" "),t("h3",{attrs:{id:"客户端处理登录请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#客户端处理登录请求"}},[e._v("#")]),e._v(" 客户端处理登录请求")]),e._v(" "),t("p",[e._v("我们实现在客户端连接上服务端之后，立即登录。在连接上服务端之后，Netty 会回调到 "),t("code",[e._v("ClientHandler")]),e._v(" 的 "),t("code",[e._v("channelActive()")]),e._v(" 方法，我们在这个方法体里面编写相应的逻辑")]),e._v(" "),t("blockquote",[t("p",[e._v("ClientHandler.java")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public void channelActive(ChannelHandlerContext ctx) {\n    System.out.println(new Date() + ": 客户端开始登录");\n\n    // 创建登录对象\n    LoginRequestPacket loginRequestPacket = new LoginRequestPacket();\n    loginRequestPacket.setUserId(UUID.randomUUID().toString());\n    loginRequestPacket.setUsername("flash");\n    loginRequestPacket.setPassword("pwd");\n\n    // 编码\n    ByteBuf buffer = PacketCodeC.INSTANCE.encode(ctx.alloc(), loginRequestPacket);\n\n    // 写数据\n    ctx.channel().writeAndFlush(buffer);\n}\n\n')])])]),t("p",[e._v("这里，我们按照前面所描述的三个步骤来分别实现，在编码的环节，我们把 "),t("code",[e._v("PacketCodeC")]),e._v(" 变成单例模式，然后把 "),t("code",[e._v("ByteBuf")]),e._v(" 分配器抽取出一个参数，这里第一个实参 "),t("code",[e._v("ctx.alloc()")]),e._v(" 获取的就是与当前连接相关的 "),t("code",[e._v("ByteBuf")]),e._v(" 分配器，建议这样来使用。")]),e._v(" "),t("p",[e._v("写数据的时候，我们通过 "),t("code",[e._v("ctx.channel()")]),e._v(" 获取到当前连接（Netty 对连接的抽象为 Channel，后面小节会分析），然后调用 "),t("code",[e._v("writeAndFlush()")]),e._v(" 就能把二进制数据写到服务端。这样，客户端发送登录请求的逻辑就完成了，接下来，我们来看一下，服务端接受到这个数据之后是如何来处理的。")]),e._v(" "),t("h3",{attrs:{id:"服务端处理登录请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务端处理登录请求"}},[e._v("#")]),e._v(" 服务端处理登录请求")]),e._v(" "),t("blockquote",[t("p",[e._v("ServerHandler.java")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public void channelRead(ChannelHandlerContext ctx, Object msg) {\n    ByteBuf requestByteBuf = (ByteBuf) msg;\n\n    // 解码\n    Packet packet = PacketCodeC.INSTANCE.decode(requestByteBuf);\n\n    // 判断是否是登录请求数据包\n    if (packet instanceof LoginRequestPacket) {\n        LoginRequestPacket loginRequestPacket = (LoginRequestPacket) packet;\n\n        // 登录校验\n        if (valid(loginRequestPacket)) {\n            // 校验成功\n        } else {\n            // 校验失败\n        }\n    }\n}\n\nprivate boolean valid(LoginRequestPacket loginRequestPacket) {\n    return true;\n}\n\n")])])]),t("p",[e._v("我们向服务端引导类 "),t("code",[e._v("ServerBootstrap")]),e._v(" 中添加了逻辑处理器 "),t("code",[e._v("ServerHandler")]),e._v(" 之后，Netty 在收到数据之后，会回调 "),t("code",[e._v("channelRead()")]),e._v(" 方法，这里的第二个参数 "),t("code",[e._v("msg")]),e._v("，在我们这个场景中，可以直接强转为 "),t("code",[e._v("ByteBuf")]),e._v("，为什么 Netty 不直接把这个参数类型定义为 "),t("code",[e._v("ByteBuf")]),e._v(" ？我们在后续的小节会分析到。")]),e._v(" "),t("p",[e._v("拿到 "),t("code",[e._v("ByteBuf")]),e._v(" 之后，首先要做的事情就是解码，解码出 java 数据包对象，然后判断如果是登录请求数据包 "),t("code",[e._v("LoginRequestPacket")]),e._v("，就进行登录逻辑的处理，这里，我们假设所有的登录都是成功的，"),t("code",[e._v("valid()")]),e._v(" 方法返回 true。 服务端校验通过之后，接下来就需要向客户端发送登录响应，我们继续编写服务端的逻辑。")]),e._v(" "),t("h2",{attrs:{id:"服务端发送登录响应"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务端发送登录响应"}},[e._v("#")]),e._v(" 服务端发送登录响应")]),e._v(" "),t("h3",{attrs:{id:"服务端处理登录响应"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务端处理登录响应"}},[e._v("#")]),e._v(" 服务端处理登录响应")]),e._v(" "),t("blockquote",[t("p",[e._v("ServerHandler.java")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('LoginResponsePacket loginResponsePacket = new LoginResponsePacket();\nloginResponsePacket.setVersion(packet.getVersion());\nif (valid(loginRequestPacket)) {\n    loginResponsePacket.setSuccess(true);\n} else {\n    loginResponsePacket.setReason("账号密码校验失败");\n    loginResponsePacket.setSuccess(false);\n}\n// 编码\nByteBuf responseByteBuf = PacketCodeC.INSTANCE.encode(ctx.alloc(), loginResponsePacket);\nctx.channel().writeAndFlush(responseByteBuf);\n\n')])])]),t("p",[e._v("这段逻辑仍然是在服务端逻辑处理器 "),t("code",[e._v("ServerHandler")]),e._v(" 的 "),t("code",[e._v("channelRead()")]),e._v(" 方法里，我们构造一个登录响应包 "),t("code",[e._v("LoginResponsePacket")]),e._v("，然后在校验成功和失败的时候分别设置标志位，接下来，调用编码器把 Java 对象编码成 "),t("code",[e._v("ByteBuf")]),e._v("，调用 "),t("code",[e._v("writeAndFlush()")]),e._v(" 写到客户端，至此，服务端的登录逻辑编写完成，接下来，我们还有最后一步，客户端处理登录响应。")]),e._v(" "),t("h3",{attrs:{id:"客户端处理登录响应"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#客户端处理登录响应"}},[e._v("#")]),e._v(" 客户端处理登录响应")]),e._v(" "),t("blockquote",[t("p",[e._v("ClientHandler.java")])]),e._v(" "),t("p",[e._v("客户端接收服务端数据的处理逻辑也是在 "),t("code",[e._v("ClientHandler")]),e._v(" 的 "),t("code",[e._v("channelRead()")]),e._v(" 方法")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public void channelRead(ChannelHandlerContext ctx, Object msg) {\n    ByteBuf byteBuf = (ByteBuf) msg;\n\n    Packet packet = PacketCodeC.INSTANCE.decode(byteBuf);\n\n    if (packet instanceof LoginResponsePacket) {\n        LoginResponsePacket loginResponsePacket = (LoginResponsePacket) packet;\n\n        if (loginResponsePacket.isSuccess()) {\n            System.out.println(new Date() + ": 客户端登录成功");\n        } else {\n            System.out.println(new Date() + ": 客户端登录失败，原因：" + loginResponsePacket.getReason());\n        }\n    }\n}\n\n')])])]),t("p",[e._v("客户端拿到数据之后，调用 "),t("code",[e._v("PacketCodeC")]),e._v(" 进行解码操作，如果类型是登录响应数据包，我们这里逻辑比较简单，在控制台打印出一条消息。")]),e._v(" "),t("p",[e._v("至此，客户端整个登录流程到这里就结束了，这里为了给大家演示，我们的客户端和服务端的处理逻辑较为简单，但是相信大家应该已经掌握了使用 Netty 来做服务端与客户端交互的基本思路，基于这个思路，再运用到实际项目中，并不是难事。")]),e._v(" "),t("p",[e._v("最后，我们再来看一下效果，下面分别是客户端与服务端的控制台输出，完整的代码参考 "),t("a",{attrs:{href:"https://github.com/lightningMan/flash-netty/tree/%E5%AE%9E%E7%8E%B0%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%99%BB%E5%BD%95",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),t("OutboundLink")],1),e._v(", 分别启动 "),t("code",[e._v("NettyServer.java")]),e._v(" 与 "),t("code",[e._v("NettyClient.java")]),e._v(" 即可看到效果。")]),e._v(" "),t("blockquote",[t("p",[e._v("服务端")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/8/14/16535d7424c10fa9?w=1240&h=554&f=png&s=203021",alt:"image.png"}})]),e._v(" "),t("blockquote",[t("p",[e._v("客户端")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/8/14/16535d7427d7e4f2?w=1196&h=530&f=png&s=94727",alt:"image.png"}})]),e._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),t("p",[e._v("本小节，我们们梳理了一下客户端登录的基本流程，然后结合上一小节的编解码逻辑，我们使用 Netty 实现了完整的客户端登录流程。")]),e._v(" "),t("h2",{attrs:{id:"思考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#思考"}},[e._v("#")]),e._v(" 思考")]),e._v(" "),t("p",[e._v("客户端登录成功或者失败之后，如果把成功或者失败的标识绑定在客户端的连接上？服务端又是如何高效避免客户端重新登录？ 欢迎留言讨论。")])])}),[],!1,null,null,null);t.default=s.exports}}]);