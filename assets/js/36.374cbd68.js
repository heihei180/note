(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{349:function(e,t,n){"use strict";n.r(t);var a=n(25),r=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"实战-客户端与服务端双向通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实战-客户端与服务端双向通信"}},[e._v("#")]),e._v(" 实战：客户端与服务端双向通信")]),e._v(" "),t("p",[e._v("在前面两个小节，我们已经学习了服务端启动与客户端启动的流程，熟悉了这两个过程之后，就可以建立服务端与客户端之间的通信了，本小节，我们用一个非常简单的 Demo 来了解一下服务端和客户端是如何来通信的。")]),e._v(" "),t("blockquote",[t("p",[e._v("本小节，我们要实现的功能是：客户端连接成功之后，向服务端写一段数据 ，服务端收到数据之后打印，并向客户端回一段数据，文章里面展示的是核心代码，完整代码请参考 "),t("a",{attrs:{href:"https://github.com/lightningMan/flash-netty/tree/%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%8C%E5%90%91%E9%80%9A%E4%BF%A1",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"客户端发数据到服务端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#客户端发数据到服务端"}},[e._v("#")]),e._v(" 客户端发数据到服务端")]),e._v(" "),t("p",[e._v("在"),t("a",{attrs:{href:"https://juejin.im/book/5b4bc28bf265da0f60130116/section/5b4dafd4f265da0f98314cc7",target:"_blank",rel:"noopener noreferrer"}},[e._v("客户端启动流程"),t("OutboundLink")],1),e._v("这一小节，我们提到， 客户端相关的数据读写逻辑是通过 "),t("code",[e._v("Bootstrap")]),e._v(" 的 "),t("code",[e._v("handler()")]),e._v(" 方法指定")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(".handler(new ChannelInitializer<SocketChannel>() {\n    @Override\n    public void initChannel(SocketChannel ch) {\n        // 指定连接数据读写逻辑\n    }\n});\n\n")])])]),t("p",[e._v("现在，我们在 "),t("code",[e._v("initChannel()")]),e._v(" 方法里面给客户端添加一个逻辑处理器，这个处理器的作用就是负责向服务端写数据")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(".handler(new ChannelInitializer<SocketChannel>() {\n    @Override\n    public void initChannel(SocketChannel ch) {\n        ch.pipeline().addLast(new FirstClientHandler());\n    }\n});\n\n")])])]),t("ol",[t("li",[t("code",[e._v("ch.pipeline()")]),e._v(" 返回的是和这条连接相关的逻辑处理链，采用了责任链模式，这里不理解没关系，后面会讲到")]),e._v(" "),t("li",[e._v("然后再调用 "),t("code",[e._v("addLast()")]),e._v(" 方法 添加一个逻辑处理器，这个逻辑处理器为的就是在客户端建立连接成功之后，向服务端写数据，下面是这个逻辑处理器相关的代码")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public class FirstClientHandler extends ChannelInboundHandlerAdapter {\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) {\n        System.out.println(new Date() + ": 客户端写出数据");\n\n        // 1. 获取数据\n        ByteBuf buffer = getByteBuf(ctx);\n\n        // 2. 写数据\n        ctx.channel().writeAndFlush(buffer);\n    }\n\n    private ByteBuf getByteBuf(ChannelHandlerContext ctx) {\n        // 1. 获取二进制抽象 ByteBuf\n        ByteBuf buffer = ctx.alloc().buffer();\n        \n        // 2. 准备数据，指定字符串的字符集为 utf-8\n        byte[] bytes = "你好，闪电侠!".getBytes(Charset.forName("utf-8"));\n\n        // 3. 填充数据到 ByteBuf\n        buffer.writeBytes(bytes);\n\n        return buffer;\n    }\n}\n\n')])])]),t("ol",[t("li",[e._v("这个逻辑处理器继承自 "),t("code",[e._v("ChannelInboundHandlerAdapter")]),e._v("，然后覆盖了 "),t("code",[e._v("channelActive()")]),e._v("方法，这个方法会在客户端连接建立成功之后被调用")]),e._v(" "),t("li",[e._v("客户端连接建立成功之后，调用到 "),t("code",[e._v("channelActive()")]),e._v(" 方法，在这个方法里面，我们编写向服务端写数据的逻辑")]),e._v(" "),t("li",[e._v("写数据的逻辑分为两步：首先我们需要获取一个 netty 对二进制数据的抽象 "),t("code",[e._v("ByteBuf")]),e._v("，上面代码中, "),t("code",[e._v("ctx.alloc()")]),e._v(" 获取到一个 "),t("code",[e._v("ByteBuf")]),e._v(" 的内存管理器，这个 内存管理器的作用就是分配一个 "),t("code",[e._v("ByteBuf")]),e._v("，然后我们把字符串的二进制数据填充到 "),t("code",[e._v("ByteBuf")]),e._v("，这样我们就获取到了 Netty 需要的一个数据格式，最后我们调用 "),t("code",[e._v("ctx.channel().writeAndFlush()")]),e._v(" 把数据写到服务端")])]),e._v(" "),t("p",[e._v("以上就是客户端启动之后，向服务端写数据的逻辑，我们可以看到，和传统的 socket 编程不同的是，Netty 里面数据是以 ByteBuf 为单位的， 所有需要写出的数据都必须塞到一个 ByteBuf，数据的写出是如此，数据的读取亦是如此，接下来我们就来看一下服务端是如何读取到这段数据的。")]),e._v(" "),t("h2",{attrs:{id:"服务端读取客户端数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务端读取客户端数据"}},[e._v("#")]),e._v(" 服务端读取客户端数据")]),e._v(" "),t("p",[e._v("在"),t("a",{attrs:{href:"https://juejin.im/book/5b4bc28bf265da0f60130116/section/5b4daf9ee51d4518f543f130",target:"_blank",rel:"noopener noreferrer"}},[e._v("服务端端启动流程"),t("OutboundLink")],1),e._v("这一小节，我们提到， 服务端相关的数据处理逻辑是通过 "),t("code",[e._v("ServerBootstrap")]),e._v(" 的 "),t("code",[e._v("childHandler()")]),e._v(" 方法指定")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(".childHandler(new ChannelInitializer<NioSocketChannel>() {\n   protected void initChannel(NioSocketChannel ch) {\n       // 指定连接数据读写逻辑\n   }\n});\n\n")])])]),t("p",[e._v("现在，我们在 "),t("code",[e._v("initChannel()")]),e._v(" 方法里面给服务端添加一个逻辑处理器，这个处理器的作用就是负责读取客户端来的数据")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(".childHandler(new ChannelInitializer<NioSocketChannel>() {\n    protected void initChannel(NioSocketChannel ch) {\n        ch.pipeline().addLast(new FirstServerHandler());\n    }\n});\n\n\n")])])]),t("p",[e._v("这个方法里面的逻辑和客户端侧类似，获取服务端侧关于这条连接的逻辑处理链 "),t("code",[e._v("pipeline")]),e._v("，然后添加一个逻辑处理器，负责读取客户端发来的数据")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public class FirstServerHandler extends ChannelInboundHandlerAdapter {\n\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) {\n        ByteBuf byteBuf = (ByteBuf) msg;\n\n        System.out.println(new Date() + ": 服务端读到数据 -> " + byteBuf.toString(Charset.forName("utf-8")));\n    }\n}\n\n')])])]),t("p",[e._v("服务端侧的逻辑处理器同样继承自 "),t("code",[e._v("ChannelInboundHandlerAdapter")]),e._v("，与客户端不同的是，这里覆盖的方法是 "),t("code",[e._v("channelRead()")]),e._v("，这个方法在接收到客户端发来的数据之后被回调。")]),e._v(" "),t("p",[e._v("这里的 "),t("code",[e._v("msg")]),e._v(" 参数指的就是 Netty 里面数据读写的载体，为什么这里不直接是 "),t("code",[e._v("ByteBuf")]),e._v("，而需要我们强转一下，我们后面会分析到。这里我们强转之后，然后调用 "),t("code",[e._v("byteBuf.toString()")]),e._v(" 就能够拿到我们客户端发过来的字符串数据。")]),e._v(" "),t("p",[e._v("我们先运行服务端，再运行客户端，下面分别是服务端控制台和客户端控制台的输出")]),e._v(" "),t("blockquote",[t("p",[e._v("服务端")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/8/4/16502aacdb32ba78?w=1240&h=117&f=png&s=55950",alt:"客户端的输出"}})]),e._v(" "),t("blockquote",[t("p",[e._v("客户端")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/8/4/16502aacdb3f0d9f?w=1001&h=143&f=png&s=23759",alt:"服务端的输出"}})]),e._v(" "),t("p",[e._v("到目前为止，我们已经实现了客户端发数据服务端打印，离我们本小节开始的目标还差一半，接下来的部分我们来实现另外一半：服务端收到数据之后向客户端回复数据")]),e._v(" "),t("h2",{attrs:{id:"服务端回数据给客户端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务端回数据给客户端"}},[e._v("#")]),e._v(" 服务端回数据给客户端")]),e._v(" "),t("p",[e._v("服务端向客户端写数据逻辑与客户端侧的写数据逻辑一样，先创建一个 "),t("code",[e._v("ByteBuf")]),e._v("，然后填充二进制数据，最后调用 "),t("code",[e._v("writeAndFlush()")]),e._v(" 方法写出去，下面是服务端回数据的代码")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public class FirstServerHandler extends ChannelInboundHandlerAdapter {\n\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) {\n        // ... 收数据逻辑省略\n\n        // 回复数据到客户端\n        System.out.println(new Date() + ": 服务端写出数据");\n        ByteBuf out = getByteBuf(ctx);\n        ctx.channel().writeAndFlush(out);\n    }\n\n    private ByteBuf getByteBuf(ChannelHandlerContext ctx) {\n        byte[] bytes = "你好，欢迎关注我的微信公众号，《闪电侠的博客》!".getBytes(Charset.forName("utf-8"));\n\n        ByteBuf buffer = ctx.alloc().buffer();\n\n        buffer.writeBytes(bytes);\n\n        return buffer;\n    }\n}\n\n')])])]),t("p",[e._v("现在，轮到客户端了。客户端的读取数据的逻辑和服务端读取数据的逻辑一样，同样是覆盖 "),t("code",[e._v("ChannelRead()")]),e._v(" 方法")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public class FirstClientHandler extends ChannelInboundHandlerAdapter {\n\n    // 写数据相关的逻辑省略\n\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) {\n        ByteBuf byteBuf = (ByteBuf) msg;\n\n        System.out.println(new Date() + ": 客户端读到数据 -> " + byteBuf.toString(Charset.forName("utf-8")));\n    }\n}\n\n')])])]),t("p",[e._v("将这段逻辑添加到客户端之后逻辑处理器 "),t("code",[e._v("FirstClientHandler")]),e._v(" 之后，客户端就能收到服务端发来的数据，完整的代码参考 "),t("a",{attrs:{href:"https://github.com/lightningMan/flash-netty/tree/%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%8C%E5%90%91%E9%80%9A%E4%BF%A1",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("客户端与服务端的读写数据的逻辑完成之后，我们先运行服务端，再运行客户端，控制台输出如下")]),e._v(" "),t("blockquote",[t("p",[e._v("服务端")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/8/4/16502aacdb206194?w=1240&h=205&f=png&s=90183",alt:"image.png"}})]),e._v(" "),t("blockquote",[t("p",[e._v("客户端")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/8/4/16502aacdb1f1579?w=1240&h=138&f=png&s=72965",alt:"image.png"}})]),e._v(" "),t("p",[e._v("到这里，我们本小节要实现的客户端与服务端双向通信的功能实现完毕，最后，我们对本小节做一个总结。")]),e._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),t("ul",[t("li",[e._v("本文中，我们了解到客户端和服务端的逻辑处理是均是在启动的时候，通过给逻辑处理链 "),t("code",[e._v("pipeline")]),e._v(" 添加逻辑处理器，来编写数据的读写逻辑，"),t("code",[e._v("pipeline")]),e._v(" 的逻辑我们在后面会分析。")]),e._v(" "),t("li",[e._v("接下来，我们学到，在客户端连接成功之后会回调到逻辑处理器的 "),t("code",[e._v("channelActive()")]),e._v(" 方法，而不管是服务端还是客户端，收到数据之后都会调用到 "),t("code",[e._v("channelRead")]),e._v(" 方法。")]),e._v(" "),t("li",[e._v("写数据调用"),t("code",[e._v("writeAndFlush")]),e._v("方法，客户端与服务端交互的二进制数据载体为 "),t("code",[e._v("ByteBuf")]),e._v("，"),t("code",[e._v("ByteBuf")]),e._v(" 通过连接的内存管理器创建，字节数据填充到 "),t("code",[e._v("ByteBuf")]),e._v(" 之后才能写到对端，接下来一小节，我们就来重点分析 "),t("code",[e._v("ByteBuf")]),e._v("。")])]),e._v(" "),t("h2",{attrs:{id:"思考题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#思考题"}},[e._v("#")]),e._v(" 思考题")]),e._v(" "),t("p",[e._v("如何实现新连接接入的时候，服务端主动向客户端推送消息，客户端回复服务端消息？欢迎留言讨论。")])])}),[],!1,null,null,null);t.default=r.exports}}]);