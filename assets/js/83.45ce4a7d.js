(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{395:function(e,n,t){"use strict";t.r(n);var a=t(25),r=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h4",{attrs:{id:"文章目录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#文章目录"}},[e._v("#")]),e._v(" 文章目录")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#_6"}},[e._v("前言")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Lombok_14"}},[e._v("一、Lombok注解分析")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Annotation_Processing_69"}},[e._v("二、编译期的注解处理器Annotation Processing")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Lombok_89"}},[e._v("三、Lombok使用方法")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#_108"}},[e._v("四、自定义注解处理器")])]),e._v(" "),n("li",[n("ul",[n("li",[n("a",{attrs:{href:"#1_112"}},[e._v("1、自定义注解")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#2Processor_126"}},[e._v("2、实现Processor接口")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#3_170"}},[e._v("3、注册注解处理器")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#MyGetter_234"}},[e._v("五、实战MyGetter注解")])]),e._v(" "),n("li",[n("ul",[n("li",[n("a",{attrs:{href:"#1MavenmyLombok_240"}},[e._v("1、新建Maven工程myLombok")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#2myget_269"}},[e._v("2、新建子模块myget")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#3person_416"}},[e._v("3、新建子模块person")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#4_435"}},[e._v("4、编译并查看结果")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#_444"}},[e._v("总结")])])]),e._v(" "),n("hr"),e._v(" "),n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),n("p",[e._v("相信做java开发的小伙伴对"),n("a",{attrs:{href:"https://so.csdn.net/so/search?q=Lombok&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[e._v("Lombok"),n("OutboundLink")],1),e._v("都不陌生，基于Lombok我们可以通过给实体类添加一些简单的注解在不改变原有代码情况下在源代码中嵌入补充信息，比如常见的Get、Set方法。"),n("br"),e._v("\n那么有小伙伴想过其底层实现原理是什么？")]),e._v(" "),n("hr"),e._v(" "),n("h2",{attrs:{id:"一、lombok注解分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、lombok注解分析"}},[e._v("#")]),e._v(" 一、Lombok注解分析")]),e._v(" "),n("p",[e._v("这里我们以使用最多的@Data为例进行分析。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('package lombok;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.SOURCE)\npublic @interface Data {\n    String staticConstructor() default "";\n}\n')])])]),n("p",[n("strong",[e._v("说明：")])]),e._v(" "),n("ul",[n("li",[e._v("元注解"),n("code",[e._v("@Target({ElementType.TYPE})")]),e._v(" - 用来说明注解@Data是用在描述类、接口（包括注解类型）或枚举上的")]),e._v(" "),n("li",[e._v("元注解"),n("code",[e._v("@Retention(RetentionPolicy.SOURCE)")]),e._v(" - 用来说明注解@Data在源文件中有效(即源文件保留),编译时期会丢掉，在.class文件中不会保留注解信息。")])]),e._v(" "),n("p",[e._v("我们在程序开发过程中，"),n("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[e._v("自定义注解"),n("OutboundLink")],1),e._v("用的最多的就是"),n("code",[e._v("@Retention(RetentionPolicy.RUNTIME)")]),e._v(" 运行期注解，再结合切面、拦截器、反射等机制我们就可以在程序运行过程中根据类上面注解来进行一些逻辑处理。")]),e._v(" "),n("p",[e._v("而Lombok中的注解都是源文件保留级别的注解，编译成class文件就会丢失对应的注解信息，那么他是通过怎样的机制增强我们的实体类的呢？？？")]),e._v(" "),n("p",[n("strong",[e._v("补充:")]),n("br"),e._v("\n注解信息的三种保留策略：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("public enum RetentionPolicy {\n    /**\n     * Annotations are to be discarded by the compiler.\n     * 注解信息被编译器丢弃\n     */\n    SOURCE,\n\n    /**\n     * Annotations are to be recorded in the class file by the compiler\n     * but need not be retained by the VM at run time.  This is the default\n     * behavior.\n     * 注解信息会被编译器保留到class文件中，但是JVM运行期间不会保留。默认保留策略\n     */\n    CLASS,\n\n    /**\n     * Annotations are to be recorded in the class file by the compiler and\n     * retained by the VM at run time, so they may be read reflectively.\n     * 注解信息会被编译器保留再class文件中，并且在JVM运行期间保留\n     * @see java.lang.reflect.AnnotatedElement\n     */\n    RUNTIME\n}\n")])])]),n("h2",{attrs:{id:"二、编译期的注解处理器annotation-processing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、编译期的注解处理器annotation-processing"}},[e._v("#")]),e._v(" 二、编译期的注解处理器Annotation Processing")]),e._v(" "),n("p",[e._v("在 JDK 6 后添加了 JSR 269: "),n("code",[e._v("Pluggable Annotation Processing API")]),e._v(" (编译期的注解处理器) ，"),n("br"),e._v("\n通过该处理期我们可以实现在编译期间根据注解信息对生成的class信息进行增强，这也正是Lombok 实现的核心。")]),e._v(" "),n("p",[e._v("声明一系列的源文件级别的注解，在通过继承 AbstractProcessor 类自定义编译期的注解处理器，重写它的 init() 和 process() 方法，在编译期时把 Lombok 的注解转换为 Java 的常规方法的。")]),e._v(" "),n("p",[e._v("但同时 Lombok 也存在这一些使用上的缺点，比如："),n("code",[e._v("降低了可调试性")]),e._v("、可能会有兼容性等问题，因此我们在使用时要根据自己的业务场景和实际情况，来选择要不要使用 Lombok，以及应该如何使用 Lombok。")]),e._v(" "),n("p",[e._v("接下来，我们进行lombok的原理分析，以Oracle的javac编译工具为例。自Java 6起，javac开始支持JSR 269 Pluggable Annotation Processing API规范，只要程序实现了该API，就能在java源码编译时调用定义的注解。"),n("br"),e._v('\n举例来说，现在有一个实现了"JSR 269 API"的程序A,那么使用javac编译源码的时候具体流程如下：'),n("br"),e._v("\n1、javac对源代码进行分析，生成一棵抽象语法树(AST)；"),n("br"),e._v('\n2、运行过程中调用实现了"JSR 269 API"的A程序；'),n("br"),e._v("\n3、此时A程序就可以完成它自己的逻辑，包括修改第一步骤得到的抽象语法树(AST)；"),n("br"),e._v("\n4、javac使用修改后的抽象语法树(AST)生成字节码文件；")]),e._v(" "),n("p",[n("strong",[e._v("详细的流程图如下：")]),n("br"),e._v(" "),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/bc5afefe570f4ce996eb08cee476a2a2.png",alt:"在这里插入图片描述"}}),n("br"),e._v("\n可以看出，在编译期阶段，当 Java 源码被抽象成语法树 (AST) 之后，Lombok 会根据自己的注解处理器动态的修改 AST，增加新的代码 (节点)，在这一切执行之后，再通过分析生成了最终的字节码 (.class) 文件，这就是 Lombok 的执行原理。")]),e._v(" "),n("h2",{attrs:{id:"三、lombok使用方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、lombok使用方法"}},[e._v("#")]),e._v(" 三、Lombok使用方法")]),e._v(" "),n("p",[e._v("使用Lombok项目的方法很简单，分为四个步骤：")]),e._v(" "),n("ol",[n("li",[e._v("安装插件，在编译类路径中加入lombok.jar包（具体安装方法可自己百度）；")]),e._v(" "),n("li",[e._v("在需要简化的类或方法上，加上要使用的注解；")]),e._v(" "),n("li",[e._v("使用支持lombok的编译工具编译源代码（关于支持lombok的编译工具，见4.支持lombok的编译工具）；")]),e._v(" "),n("li",[e._v("编译得到的字节码文件中自动生成Lombok注解对应的方法或代码；")])]),e._v(" "),n("p",[e._v("以我们常见的IDEA开发工具为例，一定要首先在IDEA中安装Lombok插件，该步骤的作用就是添加Lombok注解的编译期注解处理器。"),n("br"),e._v(" "),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/2b9fd647b0384c819c01074d4062c495.png",alt:"在这里插入图片描述"}}),n("br"),e._v("\n项目中需要引入lombok的Meven依赖，里面主要包含lombok声明的全部注解信息。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("  <dependency>\n      <groupId>org.projectlombok</groupId>\n      <artifactId>lombok</artifactId>\n      <optional>true</optional>\n  </dependency>\n")])])]),n("h2",{attrs:{id:"四、自定义注解处理器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、自定义注解处理器"}},[e._v("#")]),e._v(" 四、自定义注解处理器")]),e._v(" "),n("p",[e._v("实现一个自定义注解处理器需要有三个步骤："),n("br"),e._v(" "),n("strong",[e._v("第一是声明自定义注解，第二是实现Processor接口处理注解，第三是注册注解处理器。")])]),e._v(" "),n("h3",{attrs:{id:"_1、自定义注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、自定义注解"}},[e._v("#")]),e._v(" 1、自定义注解")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("import java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.SOURCE)\npublic @interface CustomAnnotation{\n\n}\n")])])]),n("h3",{attrs:{id:"_2、实现processor接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、实现processor接口"}},[e._v("#")]),e._v(" 2、实现Processor接口")]),e._v(" "),n("p",[e._v("通过实现Processor接口可以自定义注解处理器，这里我们采用更简单的方法通过继承AbstractProcessor类实现自定义注解处理器。实现抽象方法process处理我们想要的功能。")]),e._v(" "),n("p",[e._v("注解处理器早在JDK1.5的时候就有这个功能了，只不过当时的注解处理器是apt,相关的api是在com.sun.mirror包下的。从JDK1.6开始，apt相关的功能已经包含在了javac中，并提供了新的api在javax.annotation.processing和javax.lang.model to process annotations这两个包中。旧版的注解处理器api在JDK1.7已经被标记为deprecated,并在JDK1.8中移除了apt和相关api。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("public class CustomProcessor extends AbstractProcessor {\n    //核心方法：注解处理过程\n    @Override\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnvironment) {\n        return false;\n    }\n\n    //支持的注解类型\n    @Override\n    public Set<String> getSupportedAnnotationTypes() {\n        Set<String> annotataions = new LinkedHashSet<String>();\n        annotataions.add(CustomAnnotation.class.getCanonicalName());\n        return annotataions;\n    }\n\n    //支持的java版本\n    @Override\n    public SourceVersion getSupportedSourceVersion() {\n        return SourceVersion.latestSupported();\n    }\n}\n")])])]),n("p",[e._v("也可以通过注解得方式指定支持的注解类型和JDK版本：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('@SupportedAnnotationTypes({"com.laowan.annotation.CustomAnnotation"})\n@SupportedSourceVersion(SourceVersion.RELEASE_8)\npublic class CustomProcessor extends AbstractProcessor {\n    @Override\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnvironment) {\n        return false;\n    }\n}\n')])])]),n("p",[e._v("因为兼容的原因，特别是针对Android平台，建议使用重载 getSupportedAnnotationTypes() 和 getSupportedSourceVersion()方法代替 @SupportedAnnotationTypes 和 @SupportedSourceVersion")]),e._v(" "),n("h3",{attrs:{id:"_3、注册注解处理器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、注册注解处理器"}},[e._v("#")]),e._v(" 3、注册注解处理器")]),e._v(" "),n("p",[e._v("最后我们还需要将我们自定义的注解处理器进行注册。")]),e._v(" "),n("p",[n("strong",[e._v("方式一：resources")]),n("br"),e._v("\n新建"),n("code",[e._v("resources")]),e._v("文件夹，目录下新建"),n("code",[e._v("META-INF")]),e._v("文件夹，目录下新建services文件夹，目录下新建"),n("code",[e._v("javax.annotation.processing.Processor")]),e._v("文件，然后将我们自定义注解处理器的全类名写到此文件：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("com.laowan.annotation.CustomProcessor\n")])])]),n("p",[n("strong",[e._v("注意⚠️：")]),n("br"),e._v("\n采用上面的方法注册自定义注解处理器时，一定要将"),n("code",[e._v("resources")]),e._v("文件夹设置为Resources Root，"),n("br"),e._v("\n不然执行编译期间会一只提示找不到"),n("code",[e._v("javax.annotation.processing.Processor")]),e._v("文件中配置的处理器。"),n("br"),e._v(" "),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/4a4fb5c4999a4897acecae35bbe0bc11.png",alt:"在这里插入图片描述"}})]),e._v(" "),n("p",[e._v("示例，lombok中注册注解处理器："),n("br"),e._v(" "),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/e247af128e9d44bf865bcc6557e0547d.png",alt:"在这里插入图片描述"}})]),e._v(" "),n("p",[n("strong",[e._v("方式二：auto-service")]),n("br"),e._v("\n上面这种注册的方式太麻烦了，谷歌帮我们写了一个注解处理器来生成这个文件。"),n("br"),e._v("\ngithub地址："),n("a",{attrs:{href:"https://github.com/google/auto",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/google/auto"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("添加依赖：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("\x3c!-- https://mvnrepository.com/artifact/com.google.auto.service/auto-service --\x3e\n<dependency>\n  <groupId>com.google.auto.service</groupId>\n  <artifactId>auto-service</artifactId>\n  <version>1.0.1</version>\n</dependency>\n")])])]),n("p",[e._v("添加注解：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("@AutoService(Processor.class)\npublic class CustomProcessor extends AbstractProcessor {\n    ...\n}\n")])])]),n("p",[e._v("Lombok中的示例：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('@SupportedAnnotationTypes({"lombok.*"})\npublic static class ClaimingProcessor extends AbstractProcessor {\n    public ClaimingProcessor() {\n    }\n\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n        return true;\n    }\n\n    public SourceVersion getSupportedSourceVersion() {\n        return SourceVersion.latest();\n    }\n}\n')])])]),n("p",[e._v("搞定，体会到注解处理器的强大木有。后面我们只需关注注解处理器中的处理逻辑即可。")]),e._v(" "),n("h2",{attrs:{id:"五、实战mygetter注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五、实战mygetter注解"}},[e._v("#")]),e._v(" 五、实战MyGetter注解")]),e._v(" "),n("p",[e._v("我们实现一个简易版的 Lombok 自定义一个 Getter 方法，我们的实现步骤是：")]),e._v(" "),n("ol",[n("li",[e._v("自定义一个注解MyGetter ，并实现一个自定义的注解处理器；")]),e._v(" "),n("li",[e._v("利用 tools.jar 的 javac api 处理 AST (抽象语法树)")]),e._v(" "),n("li",[e._v("使用自定义的注解处理器编译代码。")])]),e._v(" "),n("h3",{attrs:{id:"_1、新建maven工程mylombok"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、新建maven工程mylombok"}},[e._v("#")]),e._v(" 1、新建Maven工程myLombok")]),e._v(" "),n("p",[e._v("其中包含2个子模块，myget用来存放自定义的注解和注解处理器，person模块用来使用自定义的注解。"),n("br"),e._v(" "),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/48d7f0d1482144c2add3337865244208.png",alt:"在这里插入图片描述"}})]),e._v(" "),n("p",[e._v("myLombok工程的pom.xml文件：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <packaging>pom</packaging>\n    <modules>\n        <module>myget</module>\n        <module>person</module>\n    </modules>\n\n    <groupId>com.example</groupId>\n    <artifactId>myLombok</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>myLombok</name>\n\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n</project>\n')])])]),n("p",[n("strong",[e._v("注意：")]),n("br"),e._v("\n这里不要使用spring-boot-maven-plugin的编译器，不然会编译不通过。")]),e._v(" "),n("h3",{attrs:{id:"_2、新建子模块myget"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、新建子模块myget"}},[e._v("#")]),e._v(" 2、新建子模块myget")]),e._v(" "),n("p",[e._v("1、添加Maven依赖")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("    <dependencies>\n        \x3c!--Processor中的解析过程需要依赖tools.jar--\x3e\n        <dependency>\n            <groupId>com.sun</groupId>\n            <artifactId>tools</artifactId>\n            <version>1.6.0</version>\n            <scope>system</scope>\n            <systemPath>${java.home}/../lib/tools.jar</systemPath>\n        </dependency>\n\n        \x3c!--采用google的auto-service来注入注解处理器--\x3e\n        <dependency>\n            <groupId>com.google.auto.service</groupId>\n            <artifactId>auto-service</artifactId>\n            <version>1.0.1</version>\n        </dependency>\n    </dependencies>\n")])])]),n("p",[e._v("2、首先创建一个 MyGetter.java 自定义注解，代码如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("import java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Retention(RetentionPolicy.SOURCE) // 注解只在源码中保留\n@Target(ElementType.TYPE) // 用于修饰类\npublic @interface MyGetter { // 定义 Getter\n\n}\n")])])]),n("p",[e._v("2、再实现一个自定义的注解处理器MyGetterProcessor，代码如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('//这里的导入最好直接拷贝过去\nimport com.sun.source.tree.Tree;\nimport com.sun.tools.javac.api.JavacTrees;\nimport com.sun.tools.javac.code.Flags;\nimport com.sun.tools.javac.code.Type;\nimport com.sun.tools.javac.processing.JavacProcessingEnvironment;\nimport com.sun.tools.javac.tree.JCTree;\nimport com.sun.tools.javac.tree.TreeMaker;\nimport com.sun.tools.javac.tree.TreeTranslator;\nimport com.sun.tools.javac.util.*;\n\nimport javax.annotation.processing.*;\nimport javax.lang.model.SourceVersion;\nimport javax.lang.model.element.Element;\nimport javax.lang.model.element.TypeElement;\nimport javax.tools.Diagnostic;\nimport java.util.Set;\n\n@AutoService(Processor.class) //自动注入注解处理器\n@SupportedSourceVersion(SourceVersion.RELEASE_8)\n@SupportedAnnotationTypes("com.example.myget.annotation.MyGetter")\npublic class MyGetterProcessor extends AbstractProcessor {\n\n    private Messager messager; // 编译时期输入日志的\n    private JavacTrees javacTrees; // 提供了待处理的抽象语法树\n    private TreeMaker treeMaker; // 封装了创建AST节点的一些方法\n    private Names names; // 提供了创建标识符的方法\n\n    @Override\n    public synchronized void init(ProcessingEnvironment processingEnv) {\n        super.init(processingEnv);\n        this.messager = processingEnv.getMessager();\n        this.javacTrees = JavacTrees.instance(processingEnv);\n        Context context = ((JavacProcessingEnvironment) processingEnv).getContext();\n        this.treeMaker = TreeMaker.instance(context);\n        this.names = Names.instance(context);\n    }\n\n    @Override\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n        Set<? extends Element> elementsAnnotatedWith = roundEnv.getElementsAnnotatedWith(MyGetter.class);\n        elementsAnnotatedWith.forEach(e -> {\n            JCTree tree = javacTrees.getTree(e);\n            tree.accept(new TreeTranslator() {\n                @Override\n                public void visitClassDef(JCTree.JCClassDecl jcClassDecl) {\n                    List<JCTree.JCVariableDecl> jcVariableDeclList = List.nil();\n                    // 在抽象树中找出所有的变量\n                    for (JCTree jcTree : jcClassDecl.defs) {\n                        if (jcTree.getKind().equals(Tree.Kind.VARIABLE)) {\n                            JCTree.JCVariableDecl jcVariableDecl = (JCTree.JCVariableDecl) jcTree;\n                            jcVariableDeclList = jcVariableDeclList.append(jcVariableDecl);\n                        }\n                    }\n                    // 对于变量进行生成方法的操作\n                    jcVariableDeclList.forEach(jcVariableDecl -> {\n                        messager.printMessage(Diagnostic.Kind.NOTE, jcVariableDecl.getName() + " has been processed");\n                        jcClassDecl.defs = jcClassDecl.defs.prepend(makeGetterMethodDecl(jcVariableDecl));\n                    });\n                    super.visitClassDef(jcClassDecl);\n                }\n            });\n        });\n        return true;\n    }\n\n    private JCTree.JCMethodDecl makeGetterMethodDecl(JCTree.JCVariableDecl jcVariableDecl) {\n        ListBuffer<JCTree.JCStatement> statements = new ListBuffer<>();\n        // 生成表达式 例如 this.a = a;\n        JCTree.JCExpressionStatement aThis = makeAssignment(treeMaker.Select(treeMaker.Ident(\n                names.fromString("this")), jcVariableDecl.getName()), treeMaker.Ident(jcVariableDecl.getName()));\n        statements.append(aThis);\n        JCTree.JCBlock block = treeMaker.Block(0, statements.toList());\n\n        // 生成入参\n        JCTree.JCVariableDecl param = treeMaker.VarDef(treeMaker.Modifiers(Flags.PARAMETER),\n                jcVariableDecl.getName(), jcVariableDecl.vartype, null);\n        List<JCTree.JCVariableDecl> parameters = List.of(param);\n\n        // 生成返回对象\n        JCTree.JCExpression methodType = treeMaker.Type(new Type.JCVoidType());\n        return treeMaker.MethodDef(treeMaker.Modifiers(Flags.PUBLIC),\n                getNewMethodName(jcVariableDecl.getName()), methodType, List.nil(),\n                parameters, List.nil(), block, null);\n\n    }\n\n    private Name getNewMethodName(Name name) {\n        String s = name.toString();\n        return names.fromString("get" + s.substring(0, 1).toUpperCase() + s.substring(1, name.length()));\n    }\n\n    private JCTree.JCExpressionStatement makeAssignment(JCTree.JCExpression lhs, JCTree.JCExpression rhs) {\n        return treeMaker.Exec(\n                treeMaker.Assign(\n                        lhs,\n                        rhs\n                )\n        );\n    }\n}\n')])])]),n("p",[e._v("自定义的注解处理器是我们实现简易版的 Lombok 的重中之重，我们需要继承 AbstractProcessor 类，重写它的 init() 和 process() 方法，在 process() 方法中我们先查询所有的变量，在给变量添加对应的方法。我们"),n("code",[e._v("使用 TreeMaker 对象和 Names 来处理 AST，这一步需要依赖 tool.jar")]),e._v("， 如上代码所示。")]),e._v(" "),n("h3",{attrs:{id:"_3、新建子模块person"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、新建子模块person"}},[e._v("#")]),e._v(" 3、新建子模块person")]),e._v(" "),n("p",[e._v("1、引入maven依赖")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("      <dependency>\n          <groupId>com.example</groupId>\n          <artifactId>myget</artifactId>\n          <version>0.0.1-SNAPSHOT</version>\n      </dependency>\n")])])]),n("p",[e._v("2、新增Person类，并添加@MyGetter类注解")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("@MyGetter\npublic class Person {\n    private String name;\n}\n")])])]),n("h3",{attrs:{id:"_4、编译并查看结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4、编译并查看结果"}},[e._v("#")]),e._v(" 4、编译并查看结果")]),e._v(" "),n("p",[e._v("1、执行编译打包"),n("br"),e._v(" "),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/08da5656aa8b4f8b8db15804246686ce.png",alt:"在这里插入图片描述"}})]),e._v(" "),n("p",[e._v("2、检查Person类的编译结果，自动生成了get方法，说明自定义的注解@MyGetter生效"),n("br"),e._v(" "),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/d16e2af0f4d6449b8d722fff30a1d753.png",alt:"在这里插入图片描述"}})]),e._v(" "),n("hr"),e._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),n("p",[e._v("本文主要对Lombok的实现原理进行了介绍，并通过自定义注解@MyGetter演示了编译期注解处理器的使用过程。"),n("br"),e._v("\n1、通过元注解@"),n("a",{attrs:{href:"https://so.csdn.net/so/search?q=Retention&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[e._v("Retention"),n("OutboundLink")],1),e._v("可以配置注解信息的保留策略RetentionPolicy：")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("SOURCE")]),e._v(" 源文件保留策略，编译过程会丢弃注解信息")]),e._v(" "),n("li",[n("code",[e._v("CLASS")]),e._v(" class文件保留策略，注解信息会被编译器保留到class文件中，但是JVM运行期间不会保留。默认保留策略")]),e._v(" "),n("li",[n("code",[e._v("RUNTIME")]),e._v(" 运行期保留策略，注解信息会被编译器保留再class文件中，并且在JVM运行期间保留")])]),e._v(" "),n("p",[e._v("2、Lombok中的注解都是SOURCE源文件保留策略的注解，其实现原理是借助JDK 6 后添加的 JSR 269: "),n("code",[e._v("Pluggable Annotation Processing API")]),e._v(" (编译期的注解处理器) ，通过该处理期实现在编译期间根据注解信息对生成的class信息进行增强。")]),e._v(" "),n("p",[e._v("3、自定义的编译期注解器的2种注册方式：resources方式和auto-service方式。")])])}),[],!1,null,null,null);n.default=r.exports}}]);