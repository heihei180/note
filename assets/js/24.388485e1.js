(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{337:function(e,n,t){"use strict";t.r(n);var a=t(25),s=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"jenkins-任务配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jenkins-任务配置"}},[e._v("#")]),e._v(" Jenkins 任务配置")]),e._v(" "),n("h2",{attrs:{id:"环境配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#环境配置"}},[e._v("#")]),e._v(" 环境配置")]),e._v(" "),n("p",[e._v("打开菜单：\n"),n("code",[e._v("manage Jenkins -> Tools")])]),e._v(" "),n("ul",[n("li",[e._v("选择Git地址")]),e._v(" "),n("li",[e._v("配置Maven地址")]),e._v(" "),n("li",[e._v("点击Jdk安装，配置Jdk 记住这个别名，再之后的pipline中会使用")])]),e._v(" "),n("h2",{attrs:{id:"创建流水线"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建流水线"}},[e._v("#")]),e._v(" 创建流水线")]),e._v(" "),n("p",[e._v("菜单： "),n("code",[e._v("Dashboard -> 新建Items")])]),e._v(" "),n("h3",{attrs:{id:"新建freestyle-project"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#新建freestyle-project"}},[e._v("#")]),e._v(" 新建freeStyle project")]),e._v(" "),n("p",[e._v("选择freeStyle类型项目")]),e._v(" "),n("p",[e._v("点击完成，进入项目配置：")]),e._v(" "),n("ol",[n("li",[e._v("源码管理选择Git")]),e._v(" "),n("li",[e._v("填写仓库git地址，如："),n("code",[e._v("https://github.com/Coveros-GitHub-Sandbox/helloworld.git")])]),e._v(" "),n("li",[e._v("Credentials 这里如果是公开的仓库，就选择无，如果是带有访问权限的仓库，需要添加访问令牌")]),e._v(" "),n("li",[e._v("Branches to build： 选择需要构建的分支")]),e._v(" "),n("li",[e._v("Triggers 触发器，什么时候触发，我这里选择自己主动触发，不选择自动触发")]),e._v(" "),n("li",[e._v("Environment 这里有个 "),n("code",[e._v("Delete workspace before build starts")]),e._v(" 构建前自动清理工作空间，默认的工作空间再C盘下 users 下 .jenkins 文件夹下")]),e._v(" "),n("li",[e._v("Build Steps 添加构建步骤\n"),n("ul",[n("li",[e._v("7.1 第一步克隆代码，上面已经配置了")]),e._v(" "),n("li",[e._v("7.2 拉取代码后进行打包，即执行命令："),n("code",[e._v("mvn clean package")])]),e._v(" "),n("li",[e._v("7.3 打包成功后，运行代码： "),n("code",[e._v("java -cp target/helloworld-1.1.jar com.coveros.demo.helloworld.HelloWorld")])]),e._v(" "),n("li",[e._v("因为当前是Windows环境，所以添加构建步骤时，选择："),n("code",[e._v("Execute Windows batch command")]),e._v(" , 执行windows 批处理脚本：")]),e._v(" "),n("li",[e._v("将这两个步骤添加后，还有构建后的步骤，如果需要添加再自行配置吧。")])])]),e._v(" "),n("li",[e._v("配置完成之后，点击应用，保存。")])]),e._v(" "),n("p",[e._v("然后Jenkins 会返回到刚刚创建这个项目的管理界面，点击 "),n("code",[e._v("Build Now")]),e._v(" 触发一次构建。")]),e._v(" "),n("h2",{attrs:{id:"新建流水线类型的项目-pipline"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#新建流水线类型的项目-pipline"}},[e._v("#")]),e._v(" 新建流水线类型的项目 Pipline")]),e._v(" "),n("p",[e._v("这里没啥配置的，和哪个差不多，主要就是定义流水线，可以直接写流水线脚本，也可以自己写好JenkinsFile, 指定JenkinsFile的路径，我这里写 流水线脚本")]),e._v(" "),n("p",[e._v("定义如下：")]),e._v(" "),n("div",{staticClass:"language-grovvy extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('pipeline {\n    agent any\n\n    tools {\n        // 安装配置为"M3"的Maven版本并将其添加到PATH中\n        maven "maven3"\n        // 如果需要特定版本的JDK，可以在这里配置\n\t\t// 这个取值是之前再 manageJenkins-tools中配置的Jdk\n        jdk "jdk17"\n    }\n\n    environment {\n        // 定义应用程序的主类（如果需要在多个地方使用）\n        MAIN_CLASS = "com.coveros.demo.helloworld.HelloWorld"\n        JAR_FILE = "target/helloworld-1.1.jar"\n    }\n\n    stages {\n        stage(\'Checkout\') {\n            steps {\n                // 从GitHub仓库检出代码\n                git url: \'https://github.com/Coveros-GitHub-Sandbox/helloworld.git\', branch: \'master\'\n            }\n        }\n\n        stage(\'Build\') {\n            steps {\n                // 执行Maven构建命令\n                sh "mvn clean package"\n            }\n        }\n\n        stage(\'Run Application\') {\n            steps {\n                // 运行Java应用程序\n                sh "java -cp ${JAR_FILE} ${MAIN_CLASS}"\n            }\n        }\n    }\n\n    post {\n        always {\n            // 无论构建结果如何，都记录测试结果\n            echo "build success"\n        }\n        success {\n            // 构建成功时归档生成的JAR文件\n            archiveArtifacts artifacts: "${JAR_FILE}", fingerprint: true\n        }\n        failure {\n            // 构建失败时发送通知（可选）\n            mail to: \'team@example.com\',\n                 subject: "Pipeline Failed: ${currentBuild.fullDisplayName}",\n                 body: "Something went wrong with the build."\n        }\n    }\n}\n\n')])])]),n("h2",{attrs:{id:"构建skywalking的脚本"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#构建skywalking的脚本"}},[e._v("#")]),e._v(" 构建skywalking的脚本")]),e._v(" "),n("div",{staticClass:"language-grovvy extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("pipeline {\n    agent any\n    stages {\n        stage('Checkout') {\n            steps {\n                 git(\n                    url: 'https://github.com/apache/skywalking.git',\n                    branch: 'master', \n                    credentialsId: '' // 如果需要认证\n                )\n                // sh 'cd skywalking'\n                sh 'git submodule init'\n                sh 'git submodule update --recursive' // 更新所有子模块\n            }\n        }\n        stage('Build') {\n            steps {\n                sh 'mvn clean package -Dmaven.test.skip=true' // 根据实际构建命令修改\n            }\n        }\n    }\n}\n")])])]),n("p",[e._v("上面这些命令执行完成之后，就会再工作空间生成构建产物，可以将这些构建产物推送到远程服务器之后，或者上传镜像之后，清空工作空间。发送通知邮件之类的操作.")])])}),[],!1,null,null,null);n.default=s.exports}}]);