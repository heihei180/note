(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{353:function(e,n,a){"use strict";a.r(n);var t=a(25),s=Object(t.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"实战-构建客户端与服务端-pipeline"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实战-构建客户端与服务端-pipeline"}},[e._v("#")]),e._v(" 实战：构建客户端与服务端 pipeline")]),e._v(" "),n("blockquote",[n("p",[e._v("通过"),n("a",{attrs:{href:"https://juejin.im/book/5b4bc28bf265da0f60130116/section/5b4db06d5188251afc257383",target:"_blank",rel:"noopener noreferrer"}},[e._v("上小节"),n("OutboundLink")],1),e._v("的学习，我们已经了解 pipeline 和 channelHandler 的基本概念。本小节，我们使用上一小节的理论知识来重新构建服务端和客户端的 pipeline，把复杂的逻辑从单独的一个 channelHandler 中抽取出来。")])]),e._v(" "),n("p",[e._v("Netty 内置了很多开箱即用的 ChannelHandler。下面，我们通过学习 Netty 内置的 ChannelHandler 来逐步构建我们的 pipeline。")]),e._v(" "),n("h2",{attrs:{id:"channelinboundhandleradapter-与-channeloutboundhandleradapter"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#channelinboundhandleradapter-与-channeloutboundhandleradapter"}},[e._v("#")]),e._v(" ChannelInboundHandlerAdapter 与 ChannelOutboundHandlerAdapter")]),e._v(" "),n("p",[e._v("首先是 "),n("code",[e._v("ChannelInboundHandlerAdapter")]),e._v(" ，这个适配器主要用于实现其接口 "),n("code",[e._v("ChannelInboundHandler")]),e._v(" 的所有方法，这样我们在编写自己的 handler 的时候就不需要实现 handler 里面的每一种方法，而只需要实现我们所关心的方法，默认情况下，对于 "),n("code",[e._v("ChannelInboundHandlerAdapter")]),e._v("，我们比较关心的是他的如下方法")]),e._v(" "),n("blockquote",[n("p",[e._v("ChannelInboundHandlerAdapter.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Override\npublic void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n    ctx.fireChannelRead(msg);\n}\n\n")])])]),n("p",[e._v("他的作用就是接收上一个 handler 的输出，这里的 "),n("code",[e._v("msg")]),e._v(" 就是上一个 handler 的输出。大家也可以看到，默认情况下 adapter 会通过 "),n("code",[e._v("fireChannelRead()")]),e._v(" 方法直接把上一个 handler 的输出结果传递到下一个 handler。")]),e._v(" "),n("p",[e._v("与 "),n("code",[e._v("ChannelInboundHandlerAdapter")]),e._v(" 类似的类是 "),n("code",[e._v("ChannelOutboundHandlerAdapter")]),e._v("，它的核心方法如下")]),e._v(" "),n("blockquote",[n("p",[e._v("ChannelOutboundHandlerAdapter.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Override\npublic void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n    ctx.write(msg, promise);\n}\n\n")])])]),n("p",[e._v("默认情况下，这个 adapter 也会把对象传递到下一个 outBound 节点，它的传播顺序与 inboundHandler 相反，这里就不再对这个类展开了。")]),e._v(" "),n("p",[e._v("我们往 pipeline 添加的第一个 handler 中的 "),n("code",[e._v("channelRead")]),e._v(" 方法中，"),n("code",[e._v("msg")]),e._v(" 对象其实就是 "),n("code",[e._v("ByteBuf")]),e._v("。服务端在接受到数据之后，应该首先要做的第一步逻辑就是把这个 ByteBuf 进行解码，然后把解码后的结果传递到下一个 handler，像这样")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Override\npublic void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n        ByteBuf requestByteBuf = (ByteBuf) msg;\n        // 解码\n        Packet packet = PacketCodeC.INSTANCE.decode(requestByteBuf);\n        // 解码后的对象传递到下一个 handler 处理\n        ctx.fireChannelRead(packet)\n}\n\n")])])]),n("p",[e._v("不过在开始解码之前，我们来了解一下另外一个特殊的 handler")]),e._v(" "),n("h2",{attrs:{id:"bytetomessagedecoder"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bytetomessagedecoder"}},[e._v("#")]),e._v(" ByteToMessageDecoder")]),e._v(" "),n("p",[e._v("通常情况下，无论我们是在客户端还是服务端，当我们收到数据之后，首先要做的事情就是把二进制数据转换到我们的一个 Java 对象，所以 Netty 很贴心地写了一个父类，来专门做这个事情，下面我们来看一下，如何使用这个类来实现服务端的解码")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class PacketDecoder extends ByteToMessageDecoder {\n\n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List out) {\n        out.add(PacketCodeC.INSTANCE.decode(in));\n    }\n}\n\n")])])]),n("p",[e._v("当我们继承了 "),n("code",[e._v("ByteToMessageDecoder")]),e._v(" 这个类之后，我们只需要实现一下 "),n("code",[e._v("decode()")]),e._v(" 方法，这里的 in 大家可以看到，传递进来的时候就已经是 ByteBuf 类型，所以我们不再需要强转，第三个参数是 "),n("code",[e._v("List")]),e._v(" 类型，我们通过往这个 "),n("code",[e._v("List")]),e._v(" 里面添加解码后的结果对象，就可以自动实现结果往下一个 handler 进行传递，这样，我们就实现了解码的逻辑 handler。")]),e._v(" "),n("p",[e._v("另外，值得注意的一点，对于 Netty 里面的 ByteBuf，我们使用 "),n("code",[e._v("4.1.6.Final")]),e._v(" 版本，默认情况下用的是堆外内存，在 "),n("a",{attrs:{href:"https://juejin.im/book/5b4bc28bf265da0f60130116/section/5b4db03b6fb9a04fe91a6e93",target:"_blank",rel:"noopener noreferrer"}},[e._v("ByteBuf"),n("OutboundLink")],1),e._v(" 这一小节中我们提到，堆外内存我们需要自行释放，在我们前面小节的解码的例子中，其实我们已经漏掉了这个操作，这一点是非常致命的，随着程序运行越来越久，内存泄露的问题就慢慢暴露出来了， 而这里我们使用 "),n("code",[e._v("ByteToMessageDecoder")]),e._v("，Netty 会自动进行内存的释放，我们不用操心太多的内存管理方面的逻辑，关于如何自动释放内存大家有兴趣可以参考一下 "),n("a",{attrs:{href:"https://coding.imooc.com/class/chapter/230.html#Anchor",target:"_blank",rel:"noopener noreferrer"}},[e._v("ByteToMessageDecoder的实现原理(8-2)"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("当我们通过解码器把二进制数据转换到 Java 对象即指令数据包之后，就可以针对每一种指令数据包编写逻辑了。")]),e._v(" "),n("h2",{attrs:{id:"simplechannelinboundhandler"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#simplechannelinboundhandler"}},[e._v("#")]),e._v(" SimpleChannelInboundHandler")]),e._v(" "),n("p",[e._v("回顾一下我们前面处理 Java 对象的逻辑")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("if (packet instanceof LoginRequestPacket) {\n    // ...\n} else if (packet instanceof MessageRequestPacket) {\n    // ...\n} else if ...\n\n\n")])])]),n("p",[e._v("我们通过 "),n("code",[e._v("if else")]),e._v(" 逻辑进行逻辑的处理，当我们要处理的指令越来越多的时候，代码会显得越来越臃肿，我们可以通过给 pipeline 添加多个 handler(ChannelInboundHandlerAdapter的子类) 来解决过多的 "),n("code",[e._v("if else")]),e._v(" 问题，如下")]),e._v(" "),n("blockquote",[n("p",[e._v("XXXHandler.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("if (packet instanceof XXXPacket) {\n    // ...处理\n} else {\n   ctx.fireChannelRead(packet); \n}\n\n")])])]),n("p",[e._v("这样一个好处就是，每次添加一个指令处理器，逻辑处理的框架都是一致的，")]),e._v(" "),n("p",[e._v("但是，大家应该也注意到了，这里我们编写指令处理 handler 的时候，依然编写了一段我们其实可以不用关心的 if else 判断，然后还要手动传递无法处理的对象 (XXXPacket) 至下一个指令处理器，这也是一段重复度极高的代码，因此，Netty 基于这种考虑抽象出了一个 "),n("code",[e._v("SimpleChannelInboundHandler")]),e._v(" 对象，类型判断和对象传递的活都自动帮我们实现了，而我们可以专注于处理我们所关心的指令即可。")]),e._v(" "),n("p",[e._v("下面，我们来看一下如何使用 "),n("code",[e._v("SimpleChannelInboundHandler")]),e._v(" 来简化我们的指令处理逻辑")]),e._v(" "),n("blockquote",[n("p",[e._v("LoginRequestHandler.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class LoginRequestHandler extends SimpleChannelInboundHandler<LoginRequestPacket> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, LoginRequestPacket loginRequestPacket) {\n        // 登录逻辑\n    }\n}\n\n")])])]),n("p",[n("code",[e._v("SimpleChannelInboundHandler")]),e._v(" 从字面意思也可以看到，使用它非常简单，我们在继承这个类的时候，给他传递一个泛型参数，然后在 "),n("code",[e._v("channelRead0()")]),e._v(" 方法里面，我们不用再通过 if 逻辑来判断当前对象是否是本 handler 可以处理的对象，也不用强转，不用往下传递本 handler 处理不了的对象，这一切都已经交给父类 "),n("code",[e._v("SimpleChannelInboundHandler")]),e._v(" 来实现了，我们只需要专注于我们要处理的业务逻辑即可。")]),e._v(" "),n("p",[e._v("上面的 "),n("code",[e._v("LoginRequestHandler")]),e._v(" 是用来处理登录的逻辑，同理，我们可以很轻松地编写一个消息处理逻辑处理器")]),e._v(" "),n("blockquote",[n("p",[e._v("MessageRequestHandler.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class MessageRequestHandler extends SimpleChannelInboundHandler<MessageRequestPacket> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, MessageRequestPacket messageRequestPacket) {\n\n    }\n}\n\n")])])]),n("h2",{attrs:{id:"messagetobyteencoder"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#messagetobyteencoder"}},[e._v("#")]),e._v(" MessageToByteEncoder")]),e._v(" "),n("p",[e._v("在前面几个小节，我们已经实现了登录和消息处理逻辑，处理完请求之后，我们都会给客户端一个响应，在写响应之前，我们需要把响应对象编码成 ByteBuf，结合我们本小节的内容，最后的逻辑框架如下")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class LoginRequestHandler extends SimpleChannelInboundHandler<LoginRequestPacket> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, LoginRequestPacket loginRequestPacket) {\n        LoginResponsePacket loginResponsePacket = login(loginRequestPacket);\n        ByteBuf responseByteBuf = PacketCodeC.INSTANCE.encode(ctx.alloc(), loginResponsePacket);\n        ctx.channel().writeAndFlush(responseByteBuf);\n    }\n}\n\npublic class MessageRequestHandler extends SimpleChannelInboundHandler<MessageRequestPacket> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, MessageRequestPacket messageRequestPacket) {\n        MessageResponsePacket messageResponsePacket = receiveMessage(messageRequestPacket);\n        ByteBuf responseByteBuf = PacketCodeC.INSTANCE.encode(ctx.alloc(), messageRequestPacket);\n        ctx.channel().writeAndFlush(responseByteBuf);\n    }\n}\n\n")])])]),n("p",[e._v("我们注意到，我们处理每一种指令完成之后的逻辑是类似的，都需要进行编码，然后调用 "),n("code",[e._v("writeAndFlush()")]),e._v(" 将数据写到客户端，这个编码的过程其实也是重复的逻辑，而且在编码的过程中，我们还需要手动去创建一个 ByteBuf，如下过程")]),e._v(" "),n("blockquote",[n("p",[e._v("PacketCodeC.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public ByteBuf encode(ByteBufAllocator byteBufAllocator, Packet packet) {\n    // 1. 创建 ByteBuf 对象\n    ByteBuf byteBuf = byteBufAllocator.ioBuffer();\n    // 2. 序列化 java 对象\n\n    // 3. 实际编码过程\n\n    return byteBuf;\n}\n\n")])])]),n("p",[e._v("而Netty 提供了一个特殊的 channelHandler 来专门处理编码逻辑，我们不需要每一次将响应写到对端的时候调用一次编码逻辑进行编码，也不需要自行创建 ByteBuf，这个类叫做 "),n("code",[e._v("MessageToByteEncoder")]),e._v("，从字面意思也可以看出，它的功能就是将对象转换到二进制数据。")]),e._v(" "),n("p",[e._v("下面，我们来看一下，我们如何来实现编码逻辑")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class PacketEncoder extends MessageToByteEncoder<Packet> {\n\n    @Override\n    protected void encode(ChannelHandlerContext ctx, Packet packet, ByteBuf out) {\n        PacketCodeC.INSTANCE.encode(out, packet);\n    }\n}\n\n")])])]),n("p",[n("code",[e._v("PacketEncoder")]),e._v(" 继承自 "),n("code",[e._v("MessageToByteEncoder")]),e._v("，泛型参数 "),n("code",[e._v("Packet")]),e._v(" 表示这个类的作用是实现 "),n("code",[e._v("Packet")]),e._v(" 类型对象到二进制的转换。")]),e._v(" "),n("p",[e._v("这里我们只需要实现 "),n("code",[e._v("encode()")]),e._v(" 方法，我们注意到，在这个方法里面，第二个参数是 Java 对象，而第三个参数是 ByteBuf 对象，我们在这个方法里面要做的事情就是把 Java 对象里面的字段写到 ByteBuf，我们不再需要自行去分配 ByteBuf，因此，大家注意到，"),n("code",[e._v("PacketCodeC")]),e._v(" 的 "),n("code",[e._v("encode()")]),e._v(" 方法的定义也改了，下面是更改前后的对比")]),e._v(" "),n("blockquote",[n("p",[e._v("PacketCodeC.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 更改前的定义\npublic ByteBuf encode(ByteBufAllocator byteBufAllocator, Packet packet) {\n    // 1. 创建 ByteBuf 对象\n    ByteBuf byteBuf = byteBufAllocator.ioBuffer();\n    // 2. 序列化 java 对象\n\n    // 3. 实际编码过程\n\n    return byteBuf;\n}\n// 更改后的定义\npublic void encode(ByteBuf byteBuf, Packet packet) {\n    // 1. 序列化 java 对象\n\n    // 2. 实际编码过程\n}\n\n")])])]),n("p",[e._v("我们可以看到，"),n("code",[e._v("PacketCodeC")]),e._v(" 不再需要手动创建对象，不再需要再把创建完的 ByteBuf 进行返回。当我们向 pipeline 中添加了这个编码器之后，我们在指令处理完毕之后就只需要 writeAndFlush java 对象即可，像这样")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class LoginRequestHandler extends SimpleChannelInboundHandler<LoginRequestPacket> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, LoginRequestPacket loginRequestPacket) {\n        ctx.channel().writeAndFlush(login(loginRequestPacket));\n    }\n}\n\npublic class MessageRequestHandler extends SimpleChannelInboundHandler<MessageResponsePacket> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, MessageResponsePacket messageRequestPacket) {\n        ctx.channel().writeAndFlush(receiveMessage(messageRequestPacket));\n    }\n}\n\n")])])]),n("p",[e._v("通过我们前面的分析，可以看到，Netty 为了让我们逻辑更为清晰简洁，帮我们做了很多工作，能直接用 Netty 自带的 handler 来解决的问题，不要重复造轮子。在接下里的小节，我们会继续探讨 Netty 还有哪些开箱即用的 handler。")]),e._v(" "),n("p",[e._v("分析完服务端的 pipeline 的 handler 组成结构，相信读者也不难自行分析出客户端的 handler 结构，最后，我们来看一下服务端和客户端完整的 pipeline 的 handler 结构")]),e._v(" "),n("h2",{attrs:{id:"构建客户端与服务端-pipeline"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#构建客户端与服务端-pipeline"}},[e._v("#")]),e._v(" 构建客户端与服务端 pipeline")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/10/14/1666fd9cc2b9c089?w=2900&h=898&f=png&s=160242",alt:""}})]),e._v(" "),n("p",[e._v("对应我们的代码")]),e._v(" "),n("blockquote",[n("p",[e._v("服务端")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("serverBootstrap\n               .childHandler(new ChannelInitializer<NioSocketChannel>() {\n                    protected void initChannel(NioSocketChannel ch) {\n                        ch.pipeline().addLast(new PacketDecoder());\n                        ch.pipeline().addLast(new LoginRequestHandler());\n                        ch.pipeline().addLast(new MessageRequestHandler());\n                        ch.pipeline().addLast(new PacketEncoder());\n                    }\n            });\n\n")])])]),n("blockquote",[n("p",[e._v("客户端")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("bootstrap\n        .handler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            public void initChannel(SocketChannel ch) {\n                ch.pipeline().addLast(new PacketDecoder());\n                ch.pipeline().addLast(new LoginResponseHandler());\n                ch.pipeline().addLast(new MessageResponseHandler());\n                ch.pipeline().addLast(new PacketEncoder());\n            }\n        });\n\n")])])]),n("blockquote",[n("p",[e._v("完整代码在"),n("a",{attrs:{href:"https://github.com/lightningMan/flash-netty/tree/%E6%9E%84%E5%BB%BA%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AFpipeline",target:"_blank",rel:"noopener noreferrer"}},[e._v("github"),n("OutboundLink")],1),e._v(" 对应的本小节分支，大家在本地可以行切换对应分支进行学习。")])]),e._v(" "),n("h3",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),n("p",[e._v("本小节，我们通过学习 netty 内置的 channelHandler 来逐步构建我们的服务端 pipeline，通过内置的 channelHandler 可以减少很多重复逻辑。")]),e._v(" "),n("ol",[n("li",[e._v("基于 ByteToMessageDecoder，我们可以实现自定义解码，而不用关心 ByteBuf 的强转和 解码结果的传递。")]),e._v(" "),n("li",[e._v("基于 SimpleChannelInboundHandler，我们可以实现每一种指令的处理，不再需要强转，不再有冗长乏味的 "),n("code",[e._v("if else")]),e._v(" 逻辑，不需要手动传递对象。")]),e._v(" "),n("li",[e._v("基于 "),n("code",[e._v("MessageToByteEncoder")]),e._v("，我们可以实现自定义编码，而不用关心 ByteBuf 的创建，不用每次向对端写 Java 对象都进行一次编码。")])]),e._v(" "),n("h2",{attrs:{id:"思考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#思考"}},[e._v("#")]),e._v(" 思考")]),e._v(" "),n("p",[e._v("在 "),n("code",[e._v("LoginRequestHandler")]),e._v(" 以及 "),n("code",[e._v("MessageRequestHandler")]),e._v(" 的 "),n("code",[e._v("channelRead0()")]),e._v(" 方法中，第二个参数对象（XXXRequestPacket）是从哪里传递过来的？ 欢迎留言讨论。")])])}),[],!1,null,null,null);n.default=s.exports}}]);