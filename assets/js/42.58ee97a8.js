(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{354:function(e,n,a){"use strict";a.r(n);var t=a(25),s=Object(t.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"群聊的发起与通知"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#群聊的发起与通知"}},[e._v("#")]),e._v(" 群聊的发起与通知")]),e._v(" "),n("blockquote",[n("p",[e._v("这小节，我们来学习一下如何创建一个群聊，并通知到群聊中的各位成员")])]),e._v(" "),n("p",[e._v("我们依然是先来看一下最终的效果是什么样的。")]),e._v(" "),n("h2",{attrs:{id:"_1-最终效果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-最终效果"}},[e._v("#")]),e._v(" 1. 最终效果")]),e._v(" "),n("blockquote",[n("p",[e._v("服务端")])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/10/5/16641505a75cded7?w=1240&h=278&f=png&s=114205",alt:"image.png"}})]),e._v(" "),n("blockquote",[n("p",[e._v("创建群聊的客户端")])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/10/5/16641505aa8e0757?w=1240&h=337&f=png&s=155352",alt:"image.png"}})]),e._v(" "),n("blockquote",[n("p",[e._v("其他客户端")])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/10/5/1664150595b149c0?w=1240&h=268&f=png&s=117376",alt:"image.png"}})]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/10/5/166415059748e399?w=1240&h=216&f=png&s=116068",alt:"image.png"}})]),e._v(" "),n("ol",[n("li",[e._v("首先，依然是三位用户依次登录到服务器，分别是闪电侠、极速、萨维塔。")]),e._v(" "),n("li",[e._v("然后，我们在闪电侠的控制台输入 "),n("code",[e._v("createGroup")]),e._v(" 指令，提示创建群聊需要输入 userId 列表，然后我们输入以英文逗号分隔的 userId。")]),e._v(" "),n("li",[e._v("群聊创建成功之后，分别在服务端和三个客户端弹出提示消息，包括群的 ID 以及群里各位用户的昵称。")])]),e._v(" "),n("h2",{attrs:{id:"_2-群聊原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-群聊原理"}},[e._v("#")]),e._v(" 2. 群聊原理")]),e._v(" "),n("p",[e._v("群聊的原理我们在 "),n("a",{attrs:{href:"https://juejin.im/book/5b4bc28bf265da0f60130116/section/5b6a1a9cf265da0f87595521",target:"_blank",rel:"noopener noreferrer"}},[e._v("仿微信 IM 系统简介"),n("OutboundLink")],1),e._v(" 已经学习过，我们再来重温一下")]),e._v(" "),n("p",[e._v("群聊指的是一个组内多个用户之间的聊天，一个用户发到群组的消息会被组内任何一个成员接收，下面我们来看一下群聊的基本流程。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/8/9/1651c08e91bfb935?w=1240&h=872&f=png&s=183265",alt:"image.png"}})]),e._v(" "),n("p",[e._v("如上图，要实现群聊，其实和单聊类似")]),e._v(" "),n("ol",[n("li",[e._v("A，B，C 依然会经历登录流程，服务端保存用户标识对应的 TCP 连接")]),e._v(" "),n("li",[e._v("A 发起群聊的时候，将 A，B，C 的标识发送至服务端，服务端拿到之后建立一个群聊 ID，然后把这个 ID 与 A，B，C 的标识绑定")]),e._v(" "),n("li",[e._v("群聊里面任意一方在群里聊天的时候，将群聊 ID 发送至服务端，服务端拿到群聊 ID 之后，取出对应的用户标识，遍历用户标识对应的 TCP 连接，就可以将消息发送至每一个群聊成员")])]),e._v(" "),n("p",[e._v("这一小节，我们把重点放在创建一个群聊上，由于控制台输入的指令越来越多，因此在正式开始之前，我们先对我们的控制台程序稍作重构。")]),e._v(" "),n("h2",{attrs:{id:"_2-控制台程序重构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-控制台程序重构"}},[e._v("#")]),e._v(" 2. 控制台程序重构")]),e._v(" "),n("h3",{attrs:{id:"_2-1-创建控制台命令执行器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-创建控制台命令执行器"}},[e._v("#")]),e._v(" 2.1 创建控制台命令执行器")]),e._v(" "),n("p",[e._v("首先，我们把在控制台要执行的操作抽象出来，抽象出一个接口")]),e._v(" "),n("blockquote",[n("p",[e._v("ConsoleCommand.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public interface ConsoleCommand {\n    void exec(Scanner scanner, Channel channel);\n}\n\n")])])]),n("h3",{attrs:{id:"_2-2-管理控制台命令执行器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-管理控制台命令执行器"}},[e._v("#")]),e._v(" 2.2 管理控制台命令执行器")]),e._v(" "),n("p",[e._v("接着，我们创建一个管理类来对这些操作进行管理。")]),e._v(" "),n("blockquote",[n("p",[e._v("ConsoleCommandManager.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class ConsoleCommandManager implements ConsoleCommand {\n    private Map<String, ConsoleCommand> consoleCommandMap;\n\n    public ConsoleCommandManager() {\n        consoleCommandMap = new HashMap<>();\n        consoleCommandMap.put("sendToUser", new SendToUserConsoleCommand());\n        consoleCommandMap.put("logout", new LogoutConsoleCommand());\n        consoleCommandMap.put("createGroup", new CreateGroupConsoleCommand());\n    }\n\n    @Override\n    public void exec(Scanner scanner, Channel channel) {\n        //  获取第一个指令\n        String command = scanner.next();\n\n        ConsoleCommand consoleCommand = consoleCommandMap.get(command);\n\n        if (consoleCommand != null) {\n            consoleCommand.exec(scanner, channel);\n        } else {\n            System.err.println("无法识别[" + command + "]指令，请重新输入!");\n        }\n    }\n}\n\n')])])]),n("ol",[n("li",[e._v("我们在这个管理类中，把所有要管理的控制台指令都塞到一个 map 中。")]),e._v(" "),n("li",[e._v("执行具体操作的时候，我们先获取控制台第一个输入的指令，这里以字符串代替，比较清晰（这里我们已经实现了上小节课后思考题中的登出操作），然后通过这个指令拿到对应的控制台命令执行器执行。")])]),e._v(" "),n("p",[e._v("这里我们就拿创建群聊举个栗子：首先，我们在控制台输入 "),n("code",[e._v("createGroup")]),e._v("，然后我们按下回车，就会进入 "),n("code",[e._v("CreateGroupConsoleCommand")]),e._v(" 这个类进行处理")]),e._v(" "),n("blockquote",[n("p",[e._v("CreateGroupConsoleCommand.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class CreateGroupConsoleCommand implements ConsoleCommand {\n\n    private static final String USER_ID_SPLITER = ",";\n\n    @Override\n    public void exec(Scanner scanner, Channel channel) {\n        CreateGroupRequestPacket createGroupRequestPacket = new CreateGroupRequestPacket();\n\n        System.out.print("【拉人群聊】输入 userId 列表，userId 之间英文逗号隔开：");\n        String userIds = scanner.next();\n        createGroupRequestPacket.setUserIdList(Arrays.asList(userIds.split(USER_ID_SPLITER)));\n        channel.writeAndFlush(createGroupRequestPacket);\n    }\n\n}\n\n')])])]),n("p",[e._v("进入到 "),n("code",[e._v("CreateGroupConsoleCommand")]),e._v(" 的逻辑之后，我们创建了一个群聊创建请求的数据包，然后提示输入以英文逗号分隔的 userId 的列表，填充完这个数据包之后，调用 "),n("code",[e._v("writeAndFlush()")]),e._v(" 我们就可以发送一个创建群聊的指令到服务端。")]),e._v(" "),n("p",[e._v("最后，我们再来看一下经过我们的改造，客户端的控制台线程相关的代码。")]),e._v(" "),n("blockquote",[n("p",[e._v("NettyClient.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private static void startConsoleThread(Channel channel) {\n    ConsoleCommandManager consoleCommandManager = new ConsoleCommandManager();\n    LoginConsoleCommand loginConsoleCommand = new LoginConsoleCommand();\n    Scanner scanner = new Scanner(System.in);\n\n    new Thread(() -> {\n        while (!Thread.interrupted()) {\n            if (!SessionUtil.hasLogin(channel)) {\n                loginConsoleCommand.exec(scanner, channel);\n            } else {\n                consoleCommandManager.exec(scanner, channel);\n            }\n        }\n    }).start();\n}\n\n")])])]),n("p",[e._v("抽取出控制台指令执行器之后，客户端控制台逻辑已经相对之前清晰很多了，可以非常方便地在控制台模拟各种在 IM 聊天窗口的操作，接下来，我们就来看一下如何创建群聊。")]),e._v(" "),n("h2",{attrs:{id:"_3-创建群聊的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建群聊的实现"}},[e._v("#")]),e._v(" 3. 创建群聊的实现")]),e._v(" "),n("h3",{attrs:{id:"_3-1-客户端发送创建群聊请求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-客户端发送创建群聊请求"}},[e._v("#")]),e._v(" 3.1 客户端发送创建群聊请求")]),e._v(" "),n("p",[e._v("通过我们前面讲述控制台逻辑的重构，我们已经了解到我们是发送一个 "),n("code",[e._v("CreateGroupRequestPacket")]),e._v(" 数据包到服务端，这个数据包的格式为：")]),e._v(" "),n("blockquote",[n("p",[e._v("CreateGroupRequestPacket.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class CreateGroupRequestPacket extends Packet {\n    private List<String> userIdList;\n}\n\n")])])]),n("p",[e._v("它只包含了一个列表，这个列表就是需要拉取群聊的用户列表，接下来我们看下服务端如何处理的。")]),e._v(" "),n("h3",{attrs:{id:"_3-2-服务端处理创建群聊请求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-服务端处理创建群聊请求"}},[e._v("#")]),e._v(" 3.2 服务端处理创建群聊请求")]),e._v(" "),n("p",[e._v("我们依然是创建一个 handler 来处理新的指令。")]),e._v(" "),n("blockquote",[n("p",[e._v("NettyServer.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(".childHandler(new ChannelInitializer<NioSocketChannel>() {\n    protected void initChannel(NioSocketChannel ch) {\n        // ...\n        // 添加一个 handler \n        ch.pipeline().addLast(new CreateGroupRequestHandler());\n        // ...\n    }\n});\n\n")])])]),n("p",[e._v("接下来，我们来看一下这个 handler 具体做哪些事情")]),e._v(" "),n("blockquote",[n("p",[e._v("CreateGroupRequestHandler.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class CreateGroupRequestHandler extends SimpleChannelInboundHandler<CreateGroupRequestPacket> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, CreateGroupRequestPacket createGroupRequestPacket) {\n        List<String> userIdList = createGroupRequestPacket.getUserIdList();\n\n        List<String> userNameList = new ArrayList<>();\n        // 1. 创建一个 channel 分组\n        ChannelGroup channelGroup = new DefaultChannelGroup(ctx.executor());\n\n        // 2. 筛选出待加入群聊的用户的 channel 和 userName\n        for (String userId : userIdList) {\n            Channel channel = SessionUtil.getChannel(userId);\n            if (channel != null) {\n                channelGroup.add(channel);\n                userNameList.add(SessionUtil.getSession(channel).getUserName());\n            }\n        }\n\n        // 3. 创建群聊创建结果的响应\n        CreateGroupResponsePacket createGroupResponsePacket = new CreateGroupResponsePacket();\n        createGroupResponsePacket.setSuccess(true);\n        createGroupResponsePacket.setGroupId(IDUtil.randomId());\n        createGroupResponsePacket.setUserNameList(userNameList);\n\n        // 4. 给每个客户端发送拉群通知\n        channelGroup.writeAndFlush(createGroupResponsePacket);\n\n        System.out.print("群创建成功，id 为[" + createGroupResponsePacket.getGroupId() + "], ");\n        System.out.println("群里面有：" + createGroupResponsePacket.getUserNameList());\n\n    }\n}\n\n')])])]),n("p",[e._v("整个过程可以分为以下几个过程")]),e._v(" "),n("ol",[n("li",[e._v("首先，我们这里创建一个 "),n("code",[e._v("ChannelGroup")]),e._v("。这里简单介绍一下 "),n("code",[e._v("ChannelGroup")]),e._v("：它可以把多个 chanel 的操作聚合在一起，可以往它里面添加删除 channel，可以进行 channel 的批量读写，关闭等操作，详细的功能读者可以自行翻看这个接口的方法。这里我们一个群组其实就是一个 channel 的分组集合，使用 "),n("code",[e._v("ChannelGroup")]),e._v(" 非常方便。")]),e._v(" "),n("li",[e._v("接下来，我们遍历待加入群聊的 userId，如果存在该用户，就把对应的 channel 添加到 "),n("code",[e._v("ChannelGroup")]),e._v(" 中，用户昵称也添加到昵称列表中。")]),e._v(" "),n("li",[e._v("然后，我们创建一个创建群聊响应的对象，其中 "),n("code",[e._v("groupId")]),e._v(" 是随机生成的，群聊创建结果一共三个字段，这里就不展开对这个类进行说明了。")]),e._v(" "),n("li",[e._v("最后，我们调用 "),n("code",[e._v("ChannelGroup")]),e._v(" 的聚合发送功能，将拉群的通知批量地发送到客户端，接着在服务端控制台打印创建群聊成功的信息，至此，服务端处理创建群聊请求的逻辑结束。")])]),e._v(" "),n("p",[e._v("我们接下来再来看一下客户端处理创建群聊响应。")]),e._v(" "),n("h3",{attrs:{id:"_3-3-客户端处理创建群聊响应"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-客户端处理创建群聊响应"}},[e._v("#")]),e._v(" 3.3 客户端处理创建群聊响应")]),e._v(" "),n("p",[e._v("客户端依然也是创建一个 handler 来处理新的指令。")]),e._v(" "),n("blockquote",[n("p",[e._v("NettyClient.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(".handler(new ChannelInitializer<SocketChannel>() {\n    @Override\n    public void initChannel(SocketChannel ch) {\n        // ...\n        // 添加一个新的 handler 来处理创建群聊成功响应的指令\n        ch.pipeline().addLast(new CreateGroupResponseHandler());\n        // ...\n    }\n});\n\n")])])]),n("p",[e._v("然后，在我们的应用程序里面，我们仅仅是把创建群聊成功之后的具体信息打印出来。")]),e._v(" "),n("blockquote",[n("p",[e._v("CreateGroupResponseHandler.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class CreateGroupResponseHandler extends SimpleChannelInboundHandler<CreateGroupResponsePacket> {\n\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, CreateGroupResponsePacket createGroupResponsePacket) {\n        System.out.print("群创建成功，id 为[" + createGroupResponsePacket.getGroupId() + "], ");\n        System.out.println("群里面有：" + createGroupResponsePacket.getUserNameList());\n    }\n}\n\n')])])]),n("p",[e._v("在实际生产环境中，"),n("code",[e._v("CreateGroupResponsePacket")]),e._v(" 对象里面可能有更多的信息，然后以上逻辑的处理也会更加复杂，不过我们这里已经能说明问题了。")]),e._v(" "),n("p",[e._v("到了这里，这小节的内容到这里就告一段落了，下小节，我们来学习群聊成员管理，包括添加删除成员，获取成员列表等等，最后，我们再对本小节内容做一下总结。")]),e._v(" "),n("h2",{attrs:{id:"_4-总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-总结"}},[e._v("#")]),e._v(" 4. 总结")]),e._v(" "),n("ol",[n("li",[e._v("群聊的原理和单聊类似，无非都是通过标识拿到 channel。")]),e._v(" "),n("li",[e._v("本小节，我们重构了一下控制台的程序结构，在实际带有 UI 的 IM 应用中，我们输入的第一个指令其实就是对应我们点击 UI 的某些按钮或菜单的操作。")]),e._v(" "),n("li",[e._v("通过 "),n("code",[e._v("ChannelGroup")]),e._v("，我们可以很方便地对一组 channel 进行批量操作。")])]),e._v(" "),n("h2",{attrs:{id:"_5-思考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-思考"}},[e._v("#")]),e._v(" 5. 思考")]),e._v(" "),n("p",[e._v("如何实现在某个客户端拉取群聊成员的时候，不需要输入自己的用户 ID，并且展示创建群聊消息的时候，不显示自己的昵称？欢迎留言讨论。")])])}),[],!1,null,null,null);n.default=s.exports}}]);