(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{350:function(e,n,s){"use strict";s.r(n);var t=s(25),a=Object(t.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"实战-客户端互聊原理与实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实战-客户端互聊原理与实现"}},[e._v("#")]),e._v(" 实战：客户端互聊原理与实现")]),e._v(" "),n("blockquote",[n("p",[e._v("之前写过一篇非严肃的"),n("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI1OTUzMTQyMA==&mid=2247484094&idx=1&sn=d3c89ca9897f11e94deaa85e16e09e8c&chksm=ea76354ddd01bc5b49da25fc47237137796e1151e69ad975d47d37241cfefcca3762ee35017e&token=1671319965&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"}},[e._v("微信单聊原理"),n("OutboundLink")],1),e._v("，得到广大网友的一致好评，有很多读者留言问我如何使用 Netty 来具体实现这个逻辑，学完本小节，你会发现其实很简单。")])]),e._v(" "),n("p",[e._v("在开始本小节之前，我们先来看一下本小节学完之后，单聊的实现的效果是什么样的？")]),e._v(" "),n("h2",{attrs:{id:"_1-最终效果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-最终效果"}},[e._v("#")]),e._v(" 1. 最终效果")]),e._v(" "),n("blockquote",[n("p",[e._v("服务端")])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/10/4/1663cf72744c1c77?w=1240&h=178&f=png&s=70340",alt:"image.png"}})]),e._v(" "),n("p",[e._v("服务端启动之后，两个客户端陆续登录")]),e._v(" "),n("blockquote",[n("p",[e._v("客户端 1")])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/10/4/1663cf72743c2381?w=1240&h=233&f=png&s=130573",alt:"image.png"}})]),e._v(" "),n("blockquote",[n("p",[e._v("客户端 2")])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/10/4/1663cf727482a24b?w=1240&h=236&f=png&s=128012",alt:"image.png"}})]),e._v(" "),n("ol",[n("li",[n("p",[e._v("客户端启动之后，我们在控制台输入用户名，服务端随机分配一个 userId 给客户端，这里我们省去了通过账号密码注册的过程，userId 就在服务端随机生成了，生产环境中可能会持久化在数据库，然后每次通过账号密码去“捞”。")])]),e._v(" "),n("li",[n("p",[e._v("当有两个客户端登录成功之后，在控制台输入"),n("code",[e._v("userId + 空格 + 消息")]),e._v("，这里的 userId 是消息接收方的标识， 消息接收方的控制台接着就会显示另外一个客户端发来的消息。")])])]),e._v(" "),n("p",[e._v("一对一单聊的本质其实就这么简单，稍加改动其实就可以用在生产环境下，下面，我们就来一起学习一下如何实现控制台一对一单聊")]),e._v(" "),n("h2",{attrs:{id:"_2-一对一单聊原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-一对一单聊原理"}},[e._v("#")]),e._v(" 2. 一对一单聊原理")]),e._v(" "),n("p",[e._v("一对一单聊的原理我们在 "),n("a",{attrs:{href:"https://juejin.im/book/5b4bc28bf265da0f60130116/section/5b6a1a9cf265da0f87595521",target:"_blank",rel:"noopener noreferrer"}},[e._v("仿微信 IM 系统简介"),n("OutboundLink")],1),e._v(" 已经学习过，我们再来重温一下")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/8/9/1651c08e91cdd8e6?w=1228&h=836&f=png&s=94796",alt:"单聊流程"}})]),e._v(" "),n("ol",[n("li",[e._v("如上图，A 要和 B 聊天，首先 A 和 B 需要与服务器建立连接，然后进行一次登录流程，服务端保存用户标识和 TCP 连接的映射关系。")]),e._v(" "),n("li",[e._v("A 发消息给 B，首先需要将带有 B 标识的消息数据包发送到服务器，然后服务器从消息数据包中拿到 B 的标识，找到对应的 B 的连接，将消息发送给 B。")])]),e._v(" "),n("p",[e._v("原理掌握之后，接下来我们就来逐个实现这里面的逻辑")]),e._v(" "),n("h2",{attrs:{id:"_3-一对一单聊实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-一对一单聊实现"}},[e._v("#")]),e._v(" 3. 一对一单聊实现")]),e._v(" "),n("h3",{attrs:{id:"_3-1-用户登录状态与-channel-的绑定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-用户登录状态与-channel-的绑定"}},[e._v("#")]),e._v(" 3.1 用户登录状态与 channel 的绑定")]),e._v(" "),n("p",[e._v("我们先来看一下，服务端在单聊实现中是如何处理登录消息的")]),e._v(" "),n("blockquote",[n("p",[e._v("LoginRequestHandler.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 我们略去了非关键部分的代码，详细可以本地更新下代码，切换到本小节名称对应的 git 分支\nprotected void channelRead0(ChannelHandlerContext ctx, LoginRequestPacket loginRequestPacket) {\n    LoginResponsePacket loginResponsePacket = xxx;\n    String userId = randomUserId();\n    loginResponsePacket.setUserId(userId);\n    SessionUtil.bindSession(new Session(userId, loginRequestPacket.getUserName()), ctx.channel());\n\n    // 登录响应\n    ctx.channel().writeAndFlush(loginResponsePacket);\n}\n\n// 用户断线之后取消绑定\npublic void channelInactive(ChannelHandlerContext ctx) {\n    SessionUtil.unBindSession(ctx.channel());\n}\n\n")])])]),n("p",[e._v("登录成功之后，服务端创建一个 "),n("code",[e._v("Session")]),e._v(" 对象，这个对象表示用户当前的会话信息，在我们这个应用程序里面，"),n("code",[e._v("Session")]),e._v(" 只有两个字段")]),e._v(" "),n("blockquote",[n("p",[e._v("Session.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class Session {\n    // 用户唯一性标识\n    private String userId;\n    private String userName;\n}\n\n")])])]),n("p",[e._v("实际生产环境中 "),n("code",[e._v("Session")]),e._v(" 中的字段可能较多，比如头像 url，年龄，性别等等。")]),e._v(" "),n("p",[e._v("然后，我们调用 "),n("code",[e._v("SessionUtil.bindSession()")]),e._v(" 保存用户的会话信息，具体实现如下")]),e._v(" "),n("blockquote",[n("p",[e._v("SessionUtil.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class SessionUtil {\n    // userId -> channel 的映射\n    private static final Map<String, Channel> userIdChannelMap = new ConcurrentHashMap<>();\n\n\n    public static void bindSession(Session session, Channel channel) {\n        userIdChannelMap.put(session.getUserId(), channel);\n        channel.attr(Attributes.SESSION).set(session);\n    }\n\n    public static void unBindSession(Channel channel) {\n        if (hasLogin(channel)) {\n            userIdChannelMap.remove(getSession(channel).getUserId());\n            channel.attr(Attributes.SESSION).set(null);\n        }\n    }\n    \n    public static boolean hasLogin(Channel channel) {\n\n        return channel.hasAttr(Attributes.SESSION);\n    }\n\n    public static Session getSession(Channel channel) {\n\n        return channel.attr(Attributes.SESSION).get();\n    }\n\n    public static Channel getChannel(String userId) {\n\n        return userIdChannelMap.get(userId);\n    }\n}\n\n")])])]),n("ol",[n("li",[n("code",[e._v("SessionUtil")]),e._v(" 里面维持了一个 useId -> channel 的映射 map，调用 "),n("code",[e._v("bindSession()")]),e._v(" 方法的时候，在 map 里面保存这个映射关系，"),n("code",[e._v("SessionUtil")]),e._v(" 还提供了 "),n("code",[e._v("getChannel()")]),e._v(" 方法，这样就可以通过 userId 拿到对应的 channel。")]),e._v(" "),n("li",[e._v("除了在 map 里面维持映射关系之外，在 "),n("code",[e._v("bindSession()")]),e._v(" 方法中，我们还给 channel 附上了一个属性，这个属性就是当前用户的 "),n("code",[e._v("Session")]),e._v("，我们也提供了 "),n("code",[e._v("getSession()")]),e._v(" 方法，非常方便地拿到对应 channel 的会话信息。")]),e._v(" "),n("li",[e._v("这里的 "),n("code",[e._v("SessionUtil")]),e._v(" 其实就是前面小节的 "),n("code",[e._v("LoginUtil")]),e._v("，这里重构了一下，其中 "),n("code",[e._v("hasLogin()")]),e._v(" 方法，只需要判断当前是否有用户的会话信息即可。")]),e._v(" "),n("li",[e._v("在 "),n("code",[e._v("LoginRequestHandler")]),e._v(" 中，我们还重写了 "),n("code",[e._v("channelInactive()")]),e._v(" 方法，用户下线之后，我们需要在内存里面自动删除 userId 到 channel 的映射关系，这是通过调用 "),n("code",[e._v("SessionUtil.unBindSession()")]),e._v(" 来实现的。")])]),e._v(" "),n("p",[e._v("关于用户会话信息的保存的逻辑其实就这么多，总结一点就是：登录的时候保存会话信息，登出的时候删除会话信息，接下来，我们就来实现服务端接收消息并转发的逻辑。")]),e._v(" "),n("h3",{attrs:{id:"_3-2-服务端接收消息并转发的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-服务端接收消息并转发的实现"}},[e._v("#")]),e._v(" 3.2 服务端接收消息并转发的实现")]),e._v(" "),n("p",[e._v("我们重新来定义一下客户端发送给服务端的消息的数据包格式")]),e._v(" "),n("blockquote",[n("p",[e._v("MessageRequestPacket.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class MessageRequestPacket extends Packet {\n    private String toUserId;\n    private String message;\n}\n\n")])])]),n("p",[e._v("数据包格式很简单，"),n("code",[e._v("toUserId")]),e._v(" 表示要发送给哪个用户，"),n("code",[e._v("message")]),e._v(" 表示具体内容，接下来，我们来看一下服务端的消息处理 handler 是如何来处理消息的")]),e._v(" "),n("blockquote",[n("p",[e._v("MessageRequestHandler.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class MessageRequestHandler extends SimpleChannelInboundHandler<MessageRequestPacket> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, MessageRequestPacket messageRequestPacket) {\n        // 1.拿到消息发送方的会话信息\n        Session session = SessionUtil.getSession(ctx.channel());\n\n        // 2.通过消息发送方的会话信息构造要发送的消息\n        MessageResponsePacket messageResponsePacket = new MessageResponsePacket();\n        messageResponsePacket.setFromUserId(session.getUserId());\n        messageResponsePacket.setFromUserName(session.getUserName());\n        messageResponsePacket.setMessage(messageRequestPacket.getMessage());\n\n        // 3.拿到消息接收方的 channel\n        Channel toUserChannel = SessionUtil.getChannel(messageRequestPacket.getToUserId());\n\n        // 4.将消息发送给消息接收方\n        if (toUserChannel != null && SessionUtil.hasLogin(toUserChannel)) {\n            toUserChannel.writeAndFlush(messageResponsePacket);\n        } else {\n            System.err.println("[" + messageRequestPacket.getToUserId() + "] 不在线，发送失败!");\n        }\n    }\n}\n\n')])])]),n("ol",[n("li",[e._v("服务端在收到客户端发来的消息之后，首先拿到当前用户，也就是消息发送方的会话信息。")]),e._v(" "),n("li",[e._v("拿到消息发送方的会话信息之后，构造一个发送给客户端的消息对象 "),n("code",[e._v("MessageResponsePacket")]),e._v("，填上发送消息方的用户标识、昵称、消息内容。")]),e._v(" "),n("li",[e._v("通过消息接收方的标识拿到对应的 channel。")]),e._v(" "),n("li",[e._v("如果消息接收方当前是登录状态，直接发送，如果不在线，控制台打印出一条警告消息。")])]),e._v(" "),n("p",[e._v("这里，服务端的功能相当于消息转发：收到一个客户端的消息之后，构建一条发送给另一个客户端的消息，接着拿到另一个客户端的 channel，然后通过 "),n("code",[e._v("writeAndFlush()")]),e._v(" 写出。接下来，我们再来看一下客户端收到消息之后的逻辑处理。")]),e._v(" "),n("h3",{attrs:{id:"_3-3-客户端收消息的逻辑处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-客户端收消息的逻辑处理"}},[e._v("#")]),e._v(" 3.3 客户端收消息的逻辑处理")]),e._v(" "),n("blockquote",[n("p",[e._v("MessageResponseHandler.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class MessageResponseHandler extends SimpleChannelInboundHandler<MessageResponsePacket> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, MessageResponsePacket messageResponsePacket) {\n        String fromUserId = messageResponsePacket.getFromUserId();\n        String fromUserName = messageResponsePacket.getFromUserName();\n        System.out.println(fromUserId + ":" + fromUserName + " -> " + messageResponsePacket .getMessage());\n    }\n}\n\n')])])]),n("p",[e._v("客户端收到消息之后，只是把当前消息打印出来，这里把发送方的用户标识打印出来是为了方便我们在控制台回消息的时候，可以直接复制 ^ ^，到了这里，所有的核心逻辑其实已经完成了，我们还差最后一环：在客户端的控制台进行登录和发送消息逻辑。")]),e._v(" "),n("h3",{attrs:{id:"_3-4-客户端控制台登录和发送消息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-客户端控制台登录和发送消息"}},[e._v("#")]),e._v(" 3.4 客户端控制台登录和发送消息")]),e._v(" "),n("p",[e._v("我们回到客户端的启动类，改造一下控制台的逻辑")]),e._v(" "),n("blockquote",[n("p",[e._v("NettyClient.java")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('private static void startConsoleThread(Channel channel) {\n    Scanner sc = new Scanner(System.in);\n    LoginRequestPacket loginRequestPacket = new LoginRequestPacket();\n\n    new Thread(() -> {\n        while (!Thread.interrupted()) {\n            if (!SessionUtil.hasLogin(channel)) {\n                System.out.print("输入用户名登录: ");\n                String username = sc.nextLine();\n                loginRequestPacket.setUserName(username);\n\n                // 密码使用默认的\n                loginRequestPacket.setPassword("pwd");\n\n                // 发送登录数据包\n                channel.writeAndFlush(loginRequestPacket);\n                waitForLoginResponse();\n            } else {\n                String toUserId = sc.next();\n                String message = sc.next();\n                channel.writeAndFlush(new MessageRequestPacket(toUserId, message));\n            }\n        }\n    }).start();\n}\n\nprivate static void waitForLoginResponse() {\n    try {\n        Thread.sleep(1000);\n    } catch (InterruptedException ignored) {\n    }\n}\n\n')])])]),n("p",[e._v("我们在客户端启动的时候，起一个线程")]),e._v(" "),n("ol",[n("li",[e._v("如果当前用户还未登录，我们在控制台输入一个用户名，然后构造一个登录数据包发送给服务器，发完之后，我们等待一个超时时间，可以当做是登录逻辑的最大处理时间，这里就简单粗暴点了。")]),e._v(" "),n("li",[e._v("如果当前用户已经是登录状态，我们可以在控制台输入消息接收方的 userId，然后输入一个空格，再输入消息的具体内容，然后，我们就可以构建一个消息数据包，发送到服务端。")])]),e._v(" "),n("p",[e._v("关于单聊的原理和实现，这小节到这里就结束了，最后，我们对本小节内容做一下总结。")]),e._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),n("ol",[n("li",[e._v("我们定义一个会话类 "),n("code",[e._v("Session")]),e._v(" 用户维持用户的登录信息，用户登录的时候绑定 Session 与 channel，用户登出或者断线的时候解绑 Session 与 channel。")]),e._v(" "),n("li",[e._v("服务端处理消息的时候，通过消息接收方的标识，拿到消息接收方的 channel，调用 "),n("code",[e._v("writeAndFlush()")]),e._v(" 将消息发送给消息接收方。")])]),e._v(" "),n("h2",{attrs:{id:"思考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#思考"}},[e._v("#")]),e._v(" 思考")]),e._v(" "),n("p",[e._v("我们在本小节其实还少了用户登出请求和响应的指令处理，你是否能说出，对登出指令来说，服务端和客户端分别要干哪些事情？是否能够自行实现？")]),e._v(" "),n("p",[e._v("欢迎留言一起讨论，具体实现也会在下小节对应的代码分支上放出，读者可先自行尝试下实现。")])])}),[],!1,null,null,null);n.default=a.exports}}]);